--- a/completed.md
+++ b/completed.md
@@ -2,7 +2,7 @@
 * Implemented Core Interpreter Control Flow [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go) and Simple Steps [interpreter_simple_steps.go](../pkg/core/interpreter_simple_steps.go)
 * Implemented Core Evaluation Logic [evaluation_logic.go](../pkg/core/evaluation_logic.go) and Operators [evaluation_operators.go](../pkg/core/evaluation_operators.go)
-* Implemented Core Evaluation Comparison [evaluation_comparison.go](../pkg/core/evaluation_comparison.go) and Boolean Logic [cite: uploaded:neuroscript/pkg/core/evaluation_logic.go]
-* Implemented Core AST Builder Collections [cite: uploaded:neuroscript/pkg/core/ast_builder_collections.go] and Main Evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_main.go]
-* Implemented Core AST Builder Terminators [cite: uploaded:neuroscript/pkg/core/ast_builder_terminators.go] and Evaluation Access [cite: uploaded:neuroscript/pkg/core/evaluation_access.go]
+* Implemented Core Evaluation Comparison [evaluation_comparison.go](../pkg/core/evaluation_comparison.go) and Boolean Logic [evaluation_logic.go](../pkg/core/evaluation_logic.go)
+* Implemented Core AST Builder Collections [ast_builder_collections.go](../pkg/core/ast_builder_collections.go) and Main Evaluation [evaluation_main.go](../pkg/core/evaluation_main.go)
+* Implemented Core AST Builder Terminators [ast_builder_terminators.go](../pkg/core/ast_builder_terminators.go) and Evaluation Access [evaluation_access.go](../pkg/core/evaluation_access.go)
 * Implemented `break` statement logic in interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go)
 * Implemented `continue` statement logic in interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go)
@@ -9,18 +9,18 @@
 * Implemented `return` statement logic in interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go)
-* Implemented `for` loop (range over collections) in AST builder [cite: uploaded:neuroscript/pkg/core/ast_builder_blocks.go] and interpreter [cite: uploaded:neuroscript/pkg/core/interpreter_control_flow.go]
-* Implemented Core Tools: Registry [cite: uploaded:neuroscript/pkg/core/tools_register.go], String [cite: uploaded:neuroscript/pkg/core/tools_string.go], FS [cite: uploaded:neuroscript/pkg/core/tools_fs.go], Git [cite: uploaded:neuroscript/pkg/core/tools_git.go], Shell [cite: uploaded:neuroscript/pkg/core/tools_shell.go], Math [cite: uploaded:neuroscript/pkg/core/tools_math.go], Metadata [cite: uploaded:neuroscript/pkg/core/tools_metadata.go], Checklist [cite: uploaded:neuroscript/pkg/neurodata/checklist/checklist_tool.go], Blocks [cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_tool.go], List registration [cite: uploaded:neuroscript/pkg/core/tools_list_register.go]
-* Implemented Vector/Embedding Tools [cite: uploaded:neuroscript/pkg/core/tools_vector.go] and Core Embedding Logic [cite: uploaded:neuroscript/pkg/core/embeddings.go]
-* Implemented LLM Integration [cite: uploaded:neuroscript/pkg/core/llm.go] and LLM step in interpreter [cite: uploaded:neuroscript/pkg/core/interpreter_simple_steps.go]
-* Implemented `neurogones` Command Entrypoint [cite: uploaded:neuroscript/cmd/neurogo/main.go], Application Structure [cite: uploaded:neuroscript/pkg/neurogo/app.go], and Configuration [cite: uploaded:neuroscript/pkg/neurogo/config.go]
-* Implemented Script Execution App Logic [cite: uploaded:neuroscript/pkg/neurogo/app_script.go] and Parser API [cite: uploaded:neuroscript/pkg/core/parser_api.go]
-* Created Orchestration Script Example [cite: uploaded:neuroscript/library/orchestrator.ns.txt] using Git tools [cite: uploaded:neuroscript/pkg/core/tools_git.go]
-* Created Syntax Update Script [cite: uploaded:neuroscript/library/UpdateNsSyntax.ns.txt] for migrating from old syntax based on [cite: uploaded:neuroscript/library/orchestrator.ns.txt]
-* Implemented handling of `const` and `var` block declarations in parser [cite: uploaded:neuroscript/pkg/core/generated/neuroscript_parser.go]
-* Implemented procedure definitions (`proc`) and calls in AST builder [cite: uploaded:neuroscript/pkg/core/ast_builder_procedures.go] and utility functions [cite: uploaded:neuroscript/pkg/core/utils.go]
-* Updated grammar and parser [cite: uploaded:neuroscript/pkg/core/generated/neuroscript_parser.go] for enhanced error recovery and clarity.
-* Refined error handling in the parser [cite: uploaded:neuroscript/pkg/core/generated/neuroscript_parser.go] to provide more context.
-* Created `modify_and_build.ns.txt` script [cite: uploaded:neuroscript/library/modify_and_build.ns.txt] for automated code modification and building.
-* Added comprehensive tests for evaluation logic [cite: uploaded:neuroscript/pkg/core/evaluation_test.go], covering various expression types and operators [cite: uploaded:neuroscript/pkg/core/evaluation_main.go].
-* Implemented identifier resolution logic during evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_resolve.go] to handle variable scopes correctly [cite: uploaded:neuroscript/pkg/core/evaluation_main.go].
-* Enhanced list and map literal handling in AST builder [cite: uploaded:neuroscript/pkg/core/ast_builder_collections.go] and evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_main.go].
-* Improved handling of member access (`.`) and index access (`[]`) in AST builder [cite: uploaded:neuroscript/pkg/core/ast_builder_terminators.go] and evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_access.go].
-* Added support for logical operators (`&&`, `||`, `!`) in evaluation logic [cite: uploaded:neuroscript/pkg/core/evaluation_logic.go] and operator evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_operators.go].
-* Implemented bitwise operators (`&`, `|`, `^`, `~`, `<<`, `>>`) in evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_operators.go].
-* Added comparison operators (`==`, `!=`, `<`, `<=`, `>`, `>=`) in evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_comparison.go] and boolean logic [cite: uploaded:neuroscript/pkg/core/evaluation_logic.go].
-* Wrote tests for logical and bitwise operators [cite: uploaded:neuroscript/pkg/core/evaluation_logical_bitwise_test.go] verifying correctness [cite: uploaded:neuroscript/pkg/core/evaluation_logic.go].
-* Implemented arithmetic operators (`+`, `-`, `*`, `/`, `%`) in evaluation [cite: uploaded:neuroscript/pkg/core/evaluation_operators.go] including type checking [cite: uploaded:neuroscript/pkg/core/evaluation_logic.go].
-* Added tests for function calls within expressions [cite: uploaded:neuroscript/pkg/core/evaluations_functions_test.go] ensuring proper argument evaluation and return values [cite: uploaded:neuroscript/pkg/core/evaluation_logic.go].
-* Refined operator precedence and associativity rules in the parser grammar [cite: uploaded:neuroscript/pkg/core/generated/neuroscript_parser.go] and AST builder [cite: uploaded:neuroscript/pkg/core/ast_builder_operators.go].
-* Restructured the main interpreter loop [cite: uploaded:neuroscript/pkg/core/interpreter.go] for better state management.
-* Implemented `if`/`else if`/`else` conditional statement logic in interpreter [cite: uploaded:neuroscript/pkg/core/interpreter_control_flow.go].
-* Implemented `while` loop logic in interpreter [cite: uploaded:neuroscript/pkg/core/interpreter_control_flow.go].
-* Implemented procedure call handling within the interpreter [cite: uploaded:neuroscript/pkg/core/interpreter_control_flow.go].
-* Integrated LLM response parsing and handling into the interpreter simple steps [cite: uploaded:neuroscript/pkg/core/interpreter_simple_steps.go] based on core LLM logic [cite: uploaded:neuroscript/pkg/core/llm.go].
-* Added input validation for tool calls within the interpreter [cite: uploaded:neuroscript/pkg/core/interpreter_simple_steps.go] using validation helpers [cite: uploaded:neuroscript/pkg/core/tools_validation.go].
-* Completed the main AST builder logic [cite: uploaded:neuroscript/pkg/core/ast_builder_main.go] covering all grammar rules from the parser [cite: uploaded:neuroscript/pkg/core/generated/neuroscript_parser.go].
-* Implemented file system tools (read, write, list, etc.) [cite: uploaded:neuroscript/pkg/core/tools_fs.go].
-* Implemented Git tools (clone, pull, diff, etc.) [cite: uploaded:neuroscript/pkg/core/tools_git.go].
-* Implemented comprehensive string manipulation tools [cite: uploaded:neuroscript/pkg/core/tools_string.go].
-* Implemented shell command execution tools [cite: uploaded:neuroscript/pkg/core/tools_shell.go].
-* Finalized core embedding calculation logic [cite: uploaded:neuroscript/pkg/core/embeddings.go] and associated vector tools [cite: uploaded:neuroscript/pkg/core/tools_vector.go].
-* Set up main application entry point (`neurogones`) [cite: uploaded:neuroscript/cmd/neurogo/main.go] and basic app structure [cite: uploaded:neuroscript/pkg/neurogo/app.go].
-* Developed configuration loading and management for the application [cite: uploaded:neuroscript/pkg/neurogo/config.go] using [cite: uploaded:neuroscript/pkg/neurogo/app.go].
-* Built the script execution pathway within the `neurogones` app [cite: uploaded:neuroscript/pkg/neurogo/app_script.go] utilizing the parser API [cite: uploaded:neuroscript/pkg/core/parser_api.go].
-* Implemented Neurodata Block Extraction logic [cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_extractor.go] and associated tool [cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_tool.go].
-* Added configuration options for API keys and other sensitive settings [cite: uploaded:neuroscript/pkg/neurogo/config.go].
-* Implemented metadata extraction tools for Neurodata formats [cite: uploaded:neuroscript/pkg/core/tools_metadata.go].
-* Implemented Neurodata Checklist Scanner and Parser [cite: uploaded:neuroscript/pkg/neurodata/checklist/scanner_parser.go].
-* Implemented Neurodata Checklist Tool for script integration [cite: uploaded:neuroscript/pkg/neurodata/checklist/checklist_tool.go].
-* Added tests for the Neurodata Blocks tool [cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_tool.go].
-* Implemented the Agent execution pathway (`neurogones agent`) [cite: uploaded:neuroscript/pkg/neurogo/app_agent.go] including conversation management [cite: uploaded:neuroscript/pkg/core/conversation.go], security checks [cite: uploaded:neuroscript/pkg/core/security.go], LLM interaction [cite: uploaded:neuroscript/pkg/core/llm.go], and tool execution [cite: uploaded:neuroscript/pkg/core/llm_tools.go].
-* Integrated security allowlist checks into the agent application [cite: uploaded:neuroscript/pkg/neurogo/app_agent.go] using security helpers [cite: uploaded:neuroscript/pkg/core/security.go].
-* Developed helper functions for tool execution [cite: uploaded:neuroscript/pkg/core/tools_helpers.go] including security context propagation [cite: uploaded:neuroscript/pkg/core/security.go].
-* Implemented core list manipulation tool logic [cite: uploaded:neuroscript/pkg/core/tools_list_impl.go].
-* Documented the Neuroscript language specification [cite: uploaded:neuroscript/docs/script spec.md] and Metadata standards [cite: uploaded:neuroscript/docs/metadata.md].
-* Added comprehensive tests for FS tools: Read [cite: uploaded:neuroscript/pkg/core/tools_fs_read_test.go], Write [cite: uploaded:neuroscript/pkg/core/tools_fs_write_test.go], List [cite: uploaded:neuroscript/pkg/core/tools_fs_list_test.go].
-* Implemented Restricted Mode security checks in the agent [cite: uploaded:neuroscript/pkg/neurogo/app_agent.go] based on [cite: uploaded:neuroscript/pkg/core/security.go].
-* Refined LLM prompting strategies for better tool usage and response generation [cite: uploaded:neuroscript/pkg/core/llm.go].
-* Enhanced error reporting and handling in the agent application [cite: uploaded:neuroscript/pkg/neurogo/app_agent.go] including security violations [cite: uploaded:neuroscript/pkg/core/security.go].
-* Documented the Restricted Mode feature and its implications [cite: uploaded:neuroscript/docs/restricted_mode.md].
-* Optimized vector similarity search logic [cite: uploaded:neuroscript/pkg/core/tools_vector.go] using updated embedding models [cite: uploaded:neuroscript/pkg/core/embeddings.go].
-* Improved LLM response parsing robustness [cite: uploaded:neuroscript/pkg/core/llm.go].
-* Added advanced mathematical functions to math tools [cite: uploaded:neuroscript/pkg/core/tools_math.go].
-* Refined Neurodata Checklist parser error messages [cite: uploaded:neuroscript/pkg/neurodata/checklist/scanner_parser.go].
-* Standardized error types for checklist parsing [cite: uploaded:neuroscript/pkg/neurodata/checklist/defined_errors.go].
-* Added more tests for the checklist tool usage [cite: uploaded:neuroscript/pkg/neurodata/checklist/checklist_tool.go].
+* Implemented `for` loop (range over collections) in AST builder [ast_builder_blocks.go](../pkg/core/ast_builder_blocks.go) and interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go)
+* Implemented Core Tools: Registry [tools_register.go](../pkg/core/tools_register.go), String [tools_string.go](../pkg/core/tools_string.go), FS [tools_fs.go](../pkg/core/tools_fs.go), Git [tools_git.go](../pkg/core/tools_git.go), Shell [tools_shell.go](../pkg/core/tools_shell.go), Math [tools_math.go](../pkg/core/tools_math.go), Metadata [tools_metadata.go](../pkg/core/tools_metadata.go), Checklist [checklist_tool.go](../pkg/neurodata/checklist/checklist_tool.go), Blocks [blocks_tool.go](../pkg/neurodata/blocks/blocks_tool.go), List registration [tools_list_register.go](../pkg/core/tools_list_register.go)
+* Implemented Vector/Embedding Tools [tools_vector.go](../pkg/core/tools_vector.go) and Core Embedding Logic [embeddings.go](../pkg/core/embeddings.go)
+* Implemented LLM Integration [llm.go](../pkg/core/llm.go) and LLM step in interpreter [interpreter_simple_steps.go](../pkg/core/interpreter_simple_steps.go)
+* Implemented `neurogones` Command Entrypoint [main.go](../cmd/neurogo/main.go), Application Structure [app.go](../pkg/neurogo/app.go), and Configuration [config.go](../pkg/neurogo/config.go)
+* Implemented Script Execution App Logic [app_script.go](../pkg/neurogo/app_script.go) and Parser API [parser_api.go](../pkg/core/parser_api.go)
+* Created Orchestration Script Example [orchestrator.ns.txt](../library/orchestrator.ns.txt) using Git tools [tools_git.go](../pkg/core/tools_git.go)
+* Created Syntax Update Script [UpdateNsSyntax.ns.txt](../library/UpdateNsSyntax.ns.txt) for migrating from old syntax based on [orchestrator.ns.txt](../library/orchestrator.ns.txt)
+* Implemented handling of `const` and `var` block declarations in parser [neuroscript_parser.go](../pkg/core/generated/neuroscript_parser.go)
+* Implemented procedure definitions (`proc`) and calls in AST builder [ast_builder_procedures.go](../pkg/core/ast_builder_procedures.go) and utility functions [utils.go](../pkg/core/utils.go)
+* Updated grammar and parser [neuroscript_parser.go](../pkg/core/generated/neuroscript_parser.go) for enhanced error recovery and clarity.
+* Refined error handling in the parser [neuroscript_parser.go](../pkg/core/generated/neuroscript_parser.go) to provide more context.
+* Created `modify_and_build.ns.txt` script [modify_and_build.ns.txt](../library/modify_and_build.ns.txt) for automated code modification and building.
+* Added comprehensive tests for evaluation logic [evaluation_test.go](../pkg/core/evaluation_test.go), covering various expression types and operators [evaluation_main.go](../pkg/core/evaluation_main.go).
+* Implemented identifier resolution logic during evaluation [evaluation_resolve.go](../pkg/core/evaluation_resolve.go) to handle variable scopes correctly [evaluation_main.go](../pkg/core/evaluation_main.go).
+* Enhanced list and map literal handling in AST builder [ast_builder_collections.go](../pkg/core/ast_builder_collections.go) and evaluation [evaluation_main.go](../pkg/core/evaluation_main.go).
+* Improved handling of member access (`.`) and index access (`[]`) in AST builder [ast_builder_terminators.go](../pkg/core/ast_builder_terminators.go) and evaluation [evaluation_access.go](../pkg/core/evaluation_access.go).
+* Added support for logical operators (`&&`, `||`, `!`) in evaluation logic [evaluation_logic.go](../pkg/core/evaluation_logic.go) and operator evaluation [evaluation_operators.go](../pkg/core/evaluation_operators.go).
+* Implemented bitwise operators (`&`, `|`, `^`, `~`, `<<`, `>>`) in evaluation [evaluation_operators.go](../pkg/core/evaluation_operators.go).
+* Added comparison operators (`==`, `!=`, `<`, `<=`, `>`, `>=`) in evaluation [evaluation_comparison.go](../pkg/core/evaluation_comparison.go) and boolean logic [evaluation_logic.go](../pkg/core/evaluation_logic.go).
+* Wrote tests for logical and bitwise operators [evaluation_logical_bitwise_test.go](../pkg/core/evaluation_logical_bitwise_test.go) verifying correctness [evaluation_logic.go](../pkg/core/evaluation_logic.go).
+* Implemented arithmetic operators (`+`, `-`, `*`, `/`, `%`) in evaluation [evaluation_operators.go](../pkg/core/evaluation_operators.go) including type checking [evaluation_logic.go](../pkg/core/evaluation_logic.go).
+* Added tests for function calls within expressions [evaluations_functions_test.go](../pkg/core/evaluations_functions_test.go) ensuring proper argument evaluation and return values [evaluation_logic.go](../pkg/core/evaluation_logic.go).
+* Refined operator precedence and associativity rules in the parser grammar [neuroscript_parser.go](../pkg/core/generated/neuroscript_parser.go) and AST builder [ast_builder_operators.go](../pkg/core/ast_builder_operators.go).
+* Restructured the main interpreter loop [interpreter.go](../pkg/core/interpreter.go) for better state management.
+* Implemented `if`/`else if`/`else` conditional statement logic in interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go).
+* Implemented `while` loop logic in interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go).
+* Implemented procedure call handling within the interpreter [interpreter_control_flow.go](../pkg/core/interpreter_control_flow.go).
+* Integrated LLM response parsing and handling into the interpreter simple steps [interpreter_simple_steps.go](../pkg/core/interpreter_simple_steps.go) based on core LLM logic [llm.go](../pkg/core/llm.go).
+* Added input validation for tool calls within the interpreter [interpreter_simple_steps.go](../pkg/core/interpreter_simple_steps.go) using validation helpers [tools_validation.go](../pkg/core/tools_validation.go).
+* Completed the main AST builder logic [ast_builder_main.go](../pkg/core/ast_builder_main.go) covering all grammar rules from the parser [neuroscript_parser.go](../pkg/core/generated/neuroscript_parser.go).
+* Implemented file system tools (read, write, list, etc.) [tools_fs.go](../pkg/core/tools_fs.go).
+* Implemented Git tools (clone, pull, diff, etc.) [tools_git.go](../pkg/core/tools_git.go).
+* Implemented comprehensive string manipulation tools [tools_string.go](../pkg/core/tools_string.go).
+* Implemented shell command execution tools [tools_shell.go](../pkg/core/tools_shell.go).
+* Finalized core embedding calculation logic [embeddings.go](../pkg/core/embeddings.go) and associated vector tools [tools_vector.go](../pkg/core/tools_vector.go).
+* Set up main application entry point (`neurogones`) [main.go](../cmd/neurogo/main.go) and basic app structure [app.go](../pkg/neurogo/app.go).
+* Developed configuration loading and management for the application [config.go](../pkg/neurogo/config.go) using [app.go](../pkg/neurogo/app.go).
+* Built the script execution pathway within the `neurogones` app [app_script.go](../pkg/neurogo/app_script.go) utilizing the parser API [parser_api.go](../pkg/core/parser_api.go).
+* Implemented Neurodata Block Extraction logic [blocks_extractor.go](../pkg/neurodata/blocks/blocks_extractor.go) and associated tool [blocks_tool.go](../pkg/neurodata/blocks/blocks_tool.go).
+* Added configuration options for API keys and other sensitive settings [config.go](../pkg/neurogo/config.go).
+* Implemented metadata extraction tools for Neurodata formats [tools_metadata.go](../pkg/core/tools_metadata.go).
+* Implemented Neurodata Checklist Scanner and Parser [scanner_parser.go](../pkg/neurodata/checklist/scanner_parser.go).
+* Implemented Neurodata Checklist Tool for script integration [checklist_tool.go](../pkg/neurodata/checklist/checklist_tool.go).
+* Added tests for the Neurodata Blocks tool [blocks_tool.go](../pkg/neurodata/blocks/blocks_tool.go).
+* Implemented the Agent execution pathway (`neurogones agent`) [app_agent.go](../pkg/neurogo/app_agent.go) including conversation management [conversation.go](../pkg/core/conversation.go), security checks [security.go](../pkg/core/security.go), LLM interaction [llm.go](../pkg/core/llm.go), and tool execution [llm_tools.go](../pkg/core/llm_tools.go).
+* Integrated security allowlist checks into the agent application [app_agent.go](../pkg/neurogo/app_agent.go) using security helpers [security.go](../pkg/core/security.go).
+* Developed helper functions for tool execution [tools_helpers.go](../pkg/core/tools_helpers.go) including security context propagation [security.go](../pkg/core/security.go).
+* Implemented core list manipulation tool logic [tools_list_impl.go](../pkg/core/tools_list_impl.go).
+* Documented the Neuroscript language specification [script spec.md](../docs/script spec.md) and Metadata standards [metadata.md](../docs/metadata.md).
+* Added comprehensive tests for FS tools: Read [tools_fs_read_test.go](../pkg/core/tools_fs_read_test.go), Write [tools_fs_write_test.go](../pkg/core/tools_fs_write_test.go), List [tools_fs_list_test.go](../pkg/core/tools_fs_list_test.go).
+* Implemented Restricted Mode security checks in the agent [app_agent.go](../pkg/neurogo/app_agent.go) based on [security.go](../pkg/core/security.go).
+* Refined LLM prompting strategies for better tool usage and response generation [llm.go](../pkg/core/llm.go).
+* Enhanced error reporting and handling in the agent application [app_agent.go](../pkg/neurogo/app_agent.go) including security violations [security.go](../pkg/core/security.go).
+* Documented the Restricted Mode feature and its implications [restricted_mode.md](../docs/restricted_mode.md).
+* Optimized vector similarity search logic [tools_vector.go](../pkg/core/tools_vector.go) using updated embedding models [embeddings.go](../pkg/core/embeddings.go).
+* Improved LLM response parsing robustness [llm.go](../pkg/core/llm.go).
+* Added advanced mathematical functions to math tools [tools_math.go](../pkg/core/tools_math.go).
+* Refined Neurodata Checklist parser error messages [scanner_parser.go](../pkg/neurodata/checklist/scanner_parser.go).
+* Standardized error types for checklist parsing [defined_errors.go](../pkg/neurodata/checklist/defined_errors.go).
+* Added more tests for the checklist tool usage [checklist_tool.go](../pkg/neurodata/checklist/checklist_tool.go).
--- a/development checklist.md
+++ b/development checklist.md
@@ -1,6 +1,6 @@
 # Neuroscript Development Checklist
-* Read the project overview ([cite: uploaded:neuroscript/docs/neuroscript overview.md]), core library ([cite: uploaded:neuroscript/pkg/core/]), neurodata formats ([cite: uploaded:neuroscript/pkg/neurodata/]), application logic ([cite: uploaded:neuroscript/pkg/neurogo/app_script.go]), and agent logic ([cite: uploaded:neuroscript/pkg/neurogo/app_agent.go]).
-* Familiarize yourself with this development checklist ([cite: uploaded:neuroscript/docs/development checklist.md]).
+* Read the project overview ([neuroscript overview.md](docs/neuroscript overview.md)), core library ([pkg/core/](../pkg/core/)), neurodata formats ([pkg/neurodata/](../pkg/neurodata/)), application logic ([app_script.go](../pkg/neurogo/app_script.go)), and agent logic ([app_agent.go](../pkg/neurogo/app_agent.go)).
+* Familiarize yourself with this development checklist ([development checklist.md](docs/development checklist.md)).
 * Understand the AI interaction guidelines in `AI_README.md`.

 ## Design and Planning
@@ -84,4 +84,4 @@
 * [ ] Ensure tools handle potential errors gracefully (e.g., file not found, network issues).
 * [ ] Implement appropriate security checks (e.g., allowlisting for shell/fs commands).
 * [ ] Agent execution respects the allowlist and restricted mode ([restricted_mode.md](docs/restricted_mode.md)).
-* [ ] Ensure sensitive information (API keys, etc.) is handled securely (e.g., via config, environment variables) and not hardcoded.
\ No newline at end of file
+* [ ] Ensure sensitive information (API keys, etc.) is handled securely (e.g., via config, environment variables) and not hardcoded.
--- a/docs/llm_agent_facilities.md
+++ b/docs/llm_agent_facilities.md
@@ -203,28 +203,28 @@

 ### Core LLM Interaction

-The core LLM interaction logic resides in [cite: uploaded:neuroscript/pkg/core/llm.go]. It handles:
+The core LLM interaction logic resides in [llm.go](../pkg/core/llm.go). It handles:
 * Constructing prompts based on the conversation history, available tools, and user query.
 * Making API calls to the configured LLM provider (e.g., Google AI).
 * Parsing the LLM response, specifically looking for tool calls.
 * Handling potential errors during the LLM call.

-Tool definitions and argument validation schemas are defined in [cite: uploaded:neuroscript/pkg/core/tools_types.go].
+Tool definitions and argument validation schemas are defined in [tools_types.go](../pkg/core/tools_types.go).

 ### Tool Registry and Execution

-The tool registry ([cite: uploaded:neuroscript/pkg/core/tools_registry.go]) holds all available tools.
+The tool registry ([tools_registry.go](../pkg/core/tools_registry.go)) holds all available tools.
 * Tools are registered with their name, description, and argument schema.
 * When the LLM response indicates a tool call, the agent looks up the tool in the registry.

 Tool Execution involves:
 * Parsing the arguments provided by the LLM (usually as JSON).
-* Validating arguments against the tool's schema ([cite: uploaded:neuroscript/pkg/core/tools_validation.go]).
+* Validating arguments against the tool's schema ([tools_validation.go](../pkg/core/tools_validation.go)).
 * Executing the tool's Go function with the validated arguments.
 * Capturing the tool's output (stdout, stderr, return value, errors).
 * Formatting the output to be sent back to the LLM in the next turn.

-Helper functions ([cite: uploaded:neuroscript/pkg/core/tools_helpers.go]) simplify tool implementation, especially for common patterns like FS access ([cite: uploaded:neuroscript/pkg/core/tools_fs.go]) or Git operations ([cite: uploaded:neuroscript/pkg/core/tools_git.go]).
+Helper functions ([tools_helpers.go](../pkg/core/tools_helpers.go)) simplify tool implementation, especially for common patterns like FS access ([tools_fs.go](../pkg/core/tools_fs.go)) or Git operations ([tools_git.go](../pkg/core/tools_git.go)).

 ### Available Tools (Examples)

@@ -231,13 +231,13 @@
 * **File System (`fs`)**: Read, write, list files/directories. Subject to allowlisting and restricted mode.
 * **Git (`git`)**: Clone, diff, log, checkout, etc. Subject to allowlisting.
 * **Code Search/Analysis (`code`)**: Find definitions, references, etc. (Leverages Go AST tools).
-* **Shell Execution (`shell`)**: Runs shell commands ([cite: uploaded:neuroscript/pkg/core/tools_shell.go]). Subject to allowlisting.
+* **Shell Execution (`shell`)**: Runs shell commands ([tools_shell.go](../pkg/core/tools_shell.go)). Subject to allowlisting.
 * **Neurodata Tools (`neurodata`)**: Parse, validate, query Neurodata formats (Checklist, Blocks, etc.).
 * **Vector/Embedding Tools (`vector`)**: Calculate embeddings, perform similarity search.
 * **HTTP Requests (`http`)**: Make GET/POST requests. Subject to allowlisting.

 ### Security Model
-Security is paramount ([cite: uploaded:neuroscript/pkg/core/security.go]). The agent operates under:
+Security is paramount ([security.go](../pkg/core/security.go)). The agent operates under:
 * **Allowlisting**: A configuration file (`agent_allowlist.txt`) specifies permitted directories for FS access, allowed Git repositories, safe shell commands, and permitted HTTP domains. This provides a coarse-grained control layer.
 * **Restricted Mode**: An additional flag that, when enabled, severely limits capabilities, typically disabling FS writes, shell execution, and potentially network access entirely. This is for running untrusted scripts or interacting in highly sensitive environments.
 * **User Confirmation**: Potentially dangerous operations (like modifying or deleting multiple files) might require explicit user confirmation via the conversation, although this is currently implemented sparingly to maintain flow.
@@ -256,4 +256,4 @@
 * **Improved Tool Discovery**: Make it easier for the LLM to understand nuances between similar tools.
 * **Asynchronous Tool Execution**: Allow long-running tools (like builds or tests) to run in the background.
 * **Better State Management**: Persist relevant state across agent invocations more effectively.
-* **Refined Error Handling**: Improve error messages returned from tool failures (see [cite: uploaded:neuroscript/docs/RoadMap.md]).
+* **Refined Error Handling**: Improve error messages returned from tool failures (see [RoadMap.md](RoadMap.md)).
--- a/docs/metadata.md
+++ b/docs/metadata.md
@@ -1,7 +1,7 @@
 # Neuroscript Metadata Specification (`vdlt.metadata.v1`)

 ## Overview
-This document describes the metadata format used within the Neuroscript project, particularly for Neurodata files and composite files. It complements the general Neuroscript overview ([cite: uploaded:docs/neuroscript overview.md]), the Neurodata specification ([cite: uploaded:docs/neurodata_and_composite_file_spec.md]), the Go implementation ([cite: uploaded:pkg/neurodata/metadata/metadata.go]), and the ANTLR grammar ([cite: uploaded:pkg/core/NeuroScript.g4]).
+This document describes the metadata format used within the Neuroscript project, particularly for Neurodata files and composite files. It complements the general Neuroscript overview ([neuroscript overview.md](neuroscript overview.md)), the Neurodata specification ([neurodata_and_composite_file_spec.md](neurodata_and_composite_file_spec.md)), the Go implementation ([metadata.go](../pkg/neurodata/metadata/metadata.go)), and the ANTLR grammar ([NeuroScript.g4](../pkg/core/NeuroScript.g4)).

 The metadata block serves several purposes:
 * **Identification**: Declares the format and version of the subsequent data block.
@@ -8,22 +8,22 @@
 ## Metadata Block Structure

 A metadata block starts with `%%%` followed immediately by the format identifier (e.g., `vdlt.metadata.v1`, `vdlt.checklist.v1`, `vdlt.script.v1`), and ends with the next `%%%` line or the end of the file. The content between these markers consists of key-value pairs.
-See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
-See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
+See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
+See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.

 ### Key-Value Pairs
 * Format: `key: value` (colon followed by a space)
 * Keys: Simple identifiers (alphanumeric, underscores). Standard keys are lowercase.
 * Values: Simple strings. Values can span multiple lines if subsequent lines are indented. Trailing whitespace might be significant depending on the key.
-* See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
-* See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
-* See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
+* See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
+* See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.
+* See the [Neurodata Specification](neurodata_and_composite_file_spec.md) for details on how this block integrates with specific Neurodata formats.

 ### Implementation
-* **ANTLR Lexer**: The lexer ([cite: uploaded:pkg/core/generated/neuroscript_lexer.go]) tokenizes the input based on the grammar.
-* **Go Implementation**: The Go code ([cite: uploaded:pkg/neurodata/metadata/metadata.go]) parses the metadata block. A dedicated Neuroscript tool ([cite: uploaded:pkg/core/tools_metadata.go]) exposes this functionality.
+* **ANTLR Lexer**: The lexer ([neuroscript_lexer.go](../pkg/core/generated/neuroscript_lexer.go)) tokenizes the input based on the grammar.
+* **Go Implementation**: The Go code ([metadata.go](../pkg/neurodata/metadata/metadata.go)) parses the metadata block. A dedicated Neuroscript tool ([tools_metadata.go](../pkg/core/tools_metadata.go)) exposes this functionality.


 ## Standard Metadata Keys
@@ -38,11 +38,11 @@
 * `description`: A brief, human-readable description of the block's purpose or content.
 * `version`: A version string (often semantic versioning) for the *content* itself, distinct from the `vdlt` format version.
 * `ref`: (Specific to `vdlt.references.v1` blocks) Specifies the reference string.
-  * **Content**: The content of the reference item itself (e.g., another [cite: uploaded:docs/metadata.md] block).
-  * **Content**: The content of the reference item itself (e.g., another [cite: uploaded:docs/metadata.md] block).
+  * **Content**: The content of the reference item itself (e.g., another [metadata.md](metadata.md) block).
+  * **Content**: The content of the reference item itself (e.g., another [metadata.md](metadata.md) block).
 * `schema`: (Used by various formats) Links to a schema definition (e.g., a `vdlt.map_schema.v1` block).
     * Format: Often a reference string.
-    See [NeuroData References](NeuroData/references.md) for a detailed specification.
+    See [NeuroData References](NeuroData/references.md) for a detailed specification.
 * `author`: The person or entity that created the content.
 * `timestamp`: Creation or last modification timestamp (ISO 8601 format recommended).
 * `license`: License governing the use of the content (e.g., SPDX identifier).
@@ -64,7 +64,7 @@
     * Purpose: Defines a schema for map-like data structures.
 * `vdlt.references.v1`:
     * Purpose: Defines references to other resources or data blocks.
-  * **Templates**: See [cite: uploaded:docs/NeuroData/templates.md].
+  * **Templates**: See [NeuroData Templates](NeuroData/templates.md).
 * `vdlt.symbolic_math.v1`:
     * Purpose: Represents mathematical expressions symbolically.
 * `vdlt.table.v1`:
@@ -73,7 +73,7 @@
     * Purpose: Represents hierarchical tree structures.
 * `vdlt.script.v1`:
     * Purpose: Contains executable Neuroscript code.
-The `script` metadata type indicates that the block contains Neuroscript code, as defined in the [cite: uploaded:docs/script spec.md].
+The `script` metadata type indicates that the block contains Neuroscript code, as defined in the [script spec.md](script spec.md).

 ## Composite Files

--- a/docs/neurodata_and_composite_file_spec.md
+++ b/docs/neurodata_and_composite_file_spec.md
@@ -3,14 +3,14 @@
 ## Overview

 This document outlines the high-level structure for Neurodata files and composite files that contain multiple Neurodata blocks.
-Every Neurodata file *must* begin with a metadata block (`%%% vdlt.metadata`), as specified in [cite: uploaded:neuroscript/docs/metadata.md]. This block declares the format type (e.g., `vdlt.checklist.v1`, `vdlt.form.v1`) and other essential information.
+Every Neurodata file *must* begin with a metadata block (`%%% vdlt.metadata`), as specified in [metadata.md](../metadata.md). This block declares the format type (e.g., `vdlt.checklist.v1`, `vdlt.form.v1`) and other essential information.

 ## Single Neurodata File Structure

 ```
 %%% <format_identifier> e.g., vdlt.checklist.v1
-[metadata_key]: [metadata_value]
+[metadata_key]: [metadata_value]
 ...
 %%%

@@ -18,13 +18,13 @@
 ```

 ## Composite File Structure
-Composite files allow combining multiple Neurodata blocks (and potentially other text formats like Markdown or code) into a single file. Each distinct section *must* be introduced by a metadata block ([cite: uploaded:neuroscript/docs/metadata.md]) indicating its format.
+Composite files allow combining multiple Neurodata blocks (and potentially other text formats like Markdown or code) into a single file. Each distinct section *must* be introduced by a metadata block ([metadata.md](../metadata.md)) indicating its format.

 ### Rationale
 * **Modularity**: Group related data, schemas, and scripts together.
 * **Context**: Keep specifications, examples, and tests close to the data they describe.
-* **Clarity**: Each section's type is explicitly declared via its metadata block ([cite: uploaded:neuroscript/docs/metadata.md]).
+* **Clarity**: Each section's type is explicitly declared via its metadata block ([metadata.md](../metadata.md)).
 * **Tooling**: Enables tools to easily parse and identify different sections within a larger file.

 ### Structure Rules
-* All sections start with a `%%%` metadata block ([cite: uploaded:neuroscript/docs/metadata.md]).
+* All sections start with a `%%%` metadata block ([metadata.md](../metadata.md)).
 * The format identifier in the metadata block determines how the subsequent content (up to the next `%%%` or EOF) should be interpreted.
 * Standard text formats like Markdown (`text.markdown.v1`) or code (`text.code.<lang>.v1`, e.g., `text.code.go.v1`) can also be included using appropriate format identifiers in their metadata blocks.
--- a/docs/NeuroData/checklist.md
+++ b/docs/NeuroData/checklist.md
@@ -1,5 +1,5 @@
 # Neurodata Checklist Specification (`vdlt.checklist.v1`)
-This document specifies the `vdlt.checklist.v1` Neurodata format. See the implementation in [cite: uploaded:neuroscript/pkg/neurodata/checklist/scanner_parser.go], error definitions in [cite: uploaded:neuroscript/pkg/neurodata/checklist/defined_errors.go], and general coding conventions in [cite: uploaded:neuroscript/docs/conventions.md].
+This document specifies the `vdlt.checklist.v1` Neurodata format. See the implementation in [scanner_parser.go](../../pkg/neurodata/checklist/scanner_parser.go), error definitions in [defined_errors.go](../../pkg/neurodata/checklist/defined_errors.go), and general coding conventions in [conventions.md](../../docs/conventions.md).

 ## Overview
 A simple format for tracking task completion or item status. It supports nesting and optional descriptions.
--- a/docs/NeuroData/cryptographic.md
+++ b/docs/NeuroData/cryptographic.md
@@ -1,7 +1,7 @@
 # Neurodata Cryptographic Material Specification (`vdlt.cryptographic.v1`)

 ## Overview
-This document specifies the `vdlt.cryptographic.v1` Neurodata format, used for defining cryptographic material like keys and signatures. It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), references ([cite: uploaded:neuroscript/docs/references.md]), and the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.cryptographic.v1` Neurodata format, used for defining cryptographic material like keys and signatures. It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)), references ([references.md](references.md)), and the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 The primary use cases are:
 * Defining public/private key pairs.
@@ -17,9 +17,9 @@
 ## Structure

 A `vdlt.cryptographic.v1` block contains specific sub-blocks identified by `@` symbols.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.cryptographic.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.cryptographic.v1`.
 * Zero or more Key Definition (`@key`) blocks.
-* References Block (`@references`): Optional. Uses the format defined in [cite: uploaded:neuroscript/docs/references.md] to link to external definitions or keys.
+* References Block (`@references`): Optional. Uses the format defined in [references.md](references.md) to link to external definitions or keys.
 * Zero or more Signature Definition (`@signature`) blocks.

 ```
@@ -86,8 +86,8 @@
 * `key_ref`: REQUIRED.
     * Format: `key:<key_name>` where `<key_name>` matches the `name` field of a defined `@key` block within this file or resolved via `@references`.
 * `signature`: REQUIRED. The signature data, typically Base64 encoded.
-* `ref`: A reference string following the format in [cite: generated previously in `docs/references.md`], pointing to the key definition (e.g., `key:my_signing_key`). REQUIRED.
+* `ref`: A reference string following the format in [references.md](../../docs/references.md), pointing to the key definition (e.g., `key:my_signing_key`). REQUIRED.

 ### Example
 ```
@@ -97,4 +97,4 @@

 ## Implementation Notes
 * Parsing logic needs to handle the different sub-blocks (`@key`, `@signature`, `@references`).
-* Integration with Neuroscript tools ([cite: uploaded:neuroscript/pkg/core/tools_register.go]).
+* Integration with Neuroscript tools ([tools_register.go](../../pkg/core/tools_register.go)).
--- a/docs/NeuroData/decision_table.md
+++ b/docs/NeuroData/decision_table.md
@@ -1,7 +1,7 @@
 # Neurodata Decision Table Specification (`vdlt.decision_table.v1`)

 ## Overview
-This document specifies the `vdlt.decision_table.v1` Neurodata format. It builds upon the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), references ([cite: uploaded:neuroscript/docs/references.md]), the table format ([cite: uploaded:neuroscript/docs/neurodata/table.md]), and the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.decision_table.v1` Neurodata format. It builds upon the core metadata specification ([metadata.md](../../docs/metadata.md)), references ([references.md](references.md)), the table format ([table.md](table.md)), and the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 Decision tables provide a structured way to represent complex conditional logic. This format uses a table where columns represent conditions or actions, and rows represent rules.

@@ -15,7 +15,7 @@
 ## Structure

 A `vdlt.decision_table.v1` block primarily contains a single table definition.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.decision_table.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.decision_table.v1`.
 * Optional References Block (`@references`): To link conditions/actions to external definitions if needed.
 * A Table Block (`@table`): Contains the core decision logic.

--- a/docs/NeuroData/enum.md
+++ b/docs/NeuroData/enum.md
@@ -1,7 +1,7 @@
 # Neurodata Enum Specification (`vdlt.enum.v1`)

 ## Overview
-This document specifies the `vdlt.enum.v1` Neurodata format for defining enumerated types. It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]), and potentially map schemas ([cite: uploaded:neuroscript/docs/NeuroData/map_schema.md]) for associated values.
+This document specifies the `vdlt.enum.v1` Neurodata format for defining enumerated types. It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)), the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)), and potentially map schemas ([map_schema.md](map_schema.md)) for associated values.

 Enums define a set of named constants. This format allows simple string enums or enums where each value has associated data defined by a schema.

--- a/docs/NeuroData/form.md
+++ b/docs/NeuroData/form.md
@@ -1,7 +1,7 @@
 # Neurodata Form Specification (`vdlt.form.v1`)

 ## Overview
-This document specifies the `vdlt.form.v1` Neurodata format, designed for representing data entry forms or structured data records. It uses the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), references ([cite: uploaded:neuroscript/docs/references.md]), potentially the table format ([cite: uploaded:neuroscript/docs/neurodata/table.md]) for tabular sub-sections, the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]), and is processed by the blocks extractor ([cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_extractor.go]).
+This document specifies the `vdlt.form.v1` Neurodata format, designed for representing data entry forms or structured data records. It uses the core metadata specification ([metadata.md](../../docs/metadata.md)), references ([references.md](references.md)), potentially the table format ([table.md](table.md)) for tabular sub-sections, the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)), and is processed by the blocks extractor ([blocks_extractor.go](../../pkg/neurodata/blocks/blocks_extractor.go)).

 The format uses simple key-value pairs, similar to YAML or properties files, but allows for richer value types based on Neuroscript syntax and structure nesting using indentation.

@@ -16,7 +16,7 @@
 ## Structure

 A `vdlt.form.v1` block contains key-value pairs and potentially nested blocks.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.form.v1`. It might include a `schema` key referencing a `vdlt.map_schema.v1` definition.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.form.v1`. It might include a `schema` key referencing a `vdlt.map_schema.v1` definition.
 * Optional References Block (`@references`): To link field values or types to external definitions.
 * Key-Value Pairs: The main content of the form.

@@ -27,4 +27,4 @@
 description: Describes the value. Can span multiple lines
     with indentation.

-The Go block extractor ([cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_extractor.go]) can parse this format.
+The Go block extractor ([blocks_extractor.go](../../pkg/neurodata/blocks/blocks_extractor.go)) can parse this format.
--- a/docs/NeuroData/geometry.md
+++ b/docs/NeuroData/geometry.md
@@ -1,7 +1,7 @@
 # Neurodata Geometry Specification (`vdlt.geometry.v1`)

 ## Overview
-This document specifies the `vdlt.geometry.v1` Neurodata format for representing geometric shapes and relationships. It builds upon the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), references ([cite: uploaded:neuroscript/docs/references.md]), potentially symbolic math ([cite: uploaded:neuroscript/docs/neurodata/symbolic_math.md]) for coordinate expressions, tree structures ([cite: uploaded:neuroscript/docs/neurodata/tree.md]) for scene graphs, and the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.geometry.v1` Neurodata format for representing geometric shapes and relationships. It builds upon the core metadata specification ([metadata.md](../../docs/metadata.md)), references ([references.md](references.md)), potentially symbolic math ([symbolic_math.md](symbolic_math.md)) for coordinate expressions, tree structures ([tree.md](tree.md)) for scene graphs, and the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 This format aims to represent 2D and 3D geometric data, including points, lines, polygons, transformations, and potentially scene graph structures.

@@ -13,9 +13,9 @@
 ## Structure

 A `vdlt.geometry.v1` block defines geometric entities and their relationships.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.geometry.v1`. Can include coordinate system info (`crs`) or units (`units`).
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.geometry.v1`. Can include coordinate system info (`crs`) or units (`units`).
 * Optional References Block (`@references`): Uses the format defined in [references.md](references.md) to link to external definitions, textures, materials, or coordinate systems.
-* References Block (`@references`): Optional. Uses the format defined in [cite: generated previously in `docs/references.md`] to link to external definitions or coordinate systems.
+* References Block (`@references`): Optional. Uses the format defined in [references.md](references.md) to link to external definitions or coordinate systems.
 * Definition Blocks: Specific blocks define geometric entities (e.g., `@point`, `@polygon`, `@transform`, `@scene_node`).

 ## Representation (Conceptual)
--- a/docs/NeuroData/graph.md
+++ b/docs/NeuroData/graph.md
@@ -1,7 +1,7 @@
 # Neurodata Graph Specification (`vdlt.graph.v1`)

 ## Overview
-This document specifies the `vdlt.graph.v1` Neurodata format for representing graph structures (nodes and edges). It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]) and the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.graph.v1` Neurodata format for representing graph structures (nodes and edges). It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)) and the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 The format allows defining nodes with attributes and directed/undirected edges connecting them, also potentially with attributes.

@@ -15,7 +15,7 @@
 ## Structure

 A `vdlt.graph.v1` block contains node and edge definitions.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.graph.v1`. May indicate if the graph is directed (`directed: true/false`).
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.graph.v1`. May indicate if the graph is directed (`directed: true/false`).
 * Optional References Block (`@references`): To link node/edge attributes or types to external definitions.
 * Node Definitions (`@node`): Defines individual nodes.
 * Edge Definitions (`@edge`): Defines connections between nodes.
@@ -65,4 +65,4 @@
 edge_attribute: "some value"
 ```

-* Parsed by the Go block extractor ([cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_extractor.go]).
+* Parsed by the Go block extractor ([blocks_extractor.go](../../pkg/neurodata/blocks/blocks_extractor.go)).
--- a/docs/NeuroData/list.md
+++ b/docs/NeuroData/list.md
@@ -1,16 +1,16 @@
 # Neurodata List Specification (`vdlt.list.v1`)

 ## Overview
-This document specifies the `vdlt.list.v1` Neurodata format, a simple ordered list format. It uses the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), potentially references ([cite: uploaded:neuroscript/docs/references.md]), can incorporate checklist items ([cite: uploaded:neuroscript/docs/NeuroData/checklist.md]), and adheres to the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.list.v1` Neurodata format, a simple ordered list format. It uses the core metadata specification ([metadata.md](../../docs/metadata.md)), potentially references ([references.md](references.md)), can incorporate checklist items ([checklist.md](checklist.md)), and adheres to the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 ## Format
 The format consists of lines starting with `* ` (asterisk followed by a space). Indentation creates nested lists.

-A list item can optionally be a checklist item, following the syntax defined in [cite: uploaded:neuroscript/docs/NeuroData/checklist.md].
+A list item can optionally be a checklist item, following the syntax defined in [checklist.md](checklist.md).

 ## Structure
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.list.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.list.v1`.
 * List Items: Lines starting with `* `.

 ## Syntax
@@ -21,7 +21,7 @@
 * Nested lists are created by indenting lines with spaces (consistent indentation, e.g., 2 or 4 spaces, is recommended).
 * Checklist items start with `* [ ]`, `* [x]`, `* [>]`, etc.

-* References Block (`@references`): Optional. Defined in [cite: generated previously in `docs/references.md`]. Allows referencing external items within list entries.
+* References Block (`@references`): Optional. Defined in [references.md](references.md). Allows referencing external items within list entries.

 ## Examples

@@ -29,7 +29,7 @@
 %%% vdlt.list.v1
 description: A simple shopping list
 %%%
-* Item 1
+* Item 1
 * Item 2
   * Nested Item 2a
   * Nested Item 2b
@@ -37,7 +37,7 @@

 ### Example with Checklist Items
 ```
-%%% vdlt.list.v1
+%%% vdlt.list.v1
 description: Project tasks
 %%%
 * [x] Task 1: Complete
@@ -47,7 +47,7 @@

 ### Example with References
 ```
-%%% vdlt.list.v1
+%%% vdlt.list.v1
 description: Document sections
 @references
 doc_section_1: local:./sections/intro.md#overview
@@ -60,4 +60,4 @@
 ```

 ## Implementation Notes
-* Can be parsed simply line by line, tracking indentation levels.
\ No newline at end of file
+* Can be parsed simply line by line, tracking indentation levels.
--- a/docs/NeuroData/map_literal.md
+++ b/docs/NeuroData/map_literal.md
@@ -1,19 +1,19 @@
 # Neurodata Map Literal Specification (`vdlt.map_literal.v1`)

 ## Overview
-This document specifies the `vdlt.map_literal.v1` Neurodata format, representing a simple key-value map, similar to JSON or YAML objects but with Neuroscript syntax for values. It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), the Neuroscript language specification ([cite: uploaded:neuroscript/docs/script spec.md]), and the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.map_literal.v1` Neurodata format, representing a simple key-value map, similar to JSON or YAML objects but with Neuroscript syntax for values. It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)), the Neuroscript language specification ([script spec.md](../../docs/script spec.md)), and the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 ## Structure
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.map_literal.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.map_literal.v1`.
 * Key-Value Pairs: The main content.

 ## Syntax
 * Format: `key: value` (colon followed by a space).
 * Keys: Simple identifiers (alphanumeric, underscores) or quoted strings.
-* Values: Can be any valid Neuroscript literal expression as defined in the [cite: uploaded:neuroscript/docs/script spec.md] (strings, numbers, booleans, lists, nested maps).
+* Values: Can be any valid Neuroscript literal expression as defined in the [script spec.md](../../docs/script spec.md) (strings, numbers, booleans, lists, nested maps).
 * Indentation: Used for nested maps. Consistent indentation (e.g., 2 or 4 spaces) is required for nested structures.
 * Comments: `#` can be used for comments.

-## Examples
+## Examples
 ```
 %%% vdlt.map_literal.v1
 description: Example configuration map
@@ -32,4 +32,4 @@
 ```

 ## Implementation Notes
-* Parsing requires handling Neuroscript literal value syntax.
\ No newline at end of file
+* Parsing requires handling Neuroscript literal value syntax.
+* The formal definition aligns with the map literal syntax in the [formal script spec.md](../../docs/formal script spec.md).
--- a/docs/NeuroData/map_schema.md
+++ b/docs/NeuroData/map_schema.md
@@ -1,12 +1,12 @@
 # Neurodata Map Schema Specification (`vdlt.map_schema.v1`)

 ## Overview
-This document specifies the `vdlt.map_schema.v1` Neurodata format for defining the schema (expected keys, types, and constraints) of a map or object. It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), the Neuroscript language specification ([cite: uploaded:neuroscript/docs/script spec.md]), the map literal format ([cite: uploaded:neuroscript/docs/NeuroData/map_literal.md]) for default values, and references ([cite: uploaded:neuroscript/docs/NeuroData/references.md]) for type definitions.
+This document specifies the `vdlt.map_schema.v1` Neurodata format for defining the schema (expected keys, types, and constraints) of a map or object. It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)), the Neuroscript language specification ([script spec.md](../../docs/script spec.md)), the map literal format ([map_literal.md](map_literal.md)) for default values, and references ([references.md](references.md)) for type definitions.

 ## Structure
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.map_schema.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.map_schema.v1`.
 * Optional References Block (`@references`): To define or link to complex type definitions used in the schema fields.
 * Field Definitions: Key-value pairs where the key is the field name and the value is a map defining the field's schema attributes.

 ## Syntax
@@ -15,7 +15,7 @@
     * `type`: (Required) The expected data type (e.g., `string`, `int`, `bool`, `float`, `list`, `map`, or a reference like `ref:my_custom_type`). For lists/maps, you can specify element/value types (e.g., `list<string>`, `map<string, int>`).
     * `required`: (Optional) `true` or `false` (default: `false`).
     * `description`: (Optional) A human-readable description of the field.
-    * `default`: (Optional) A default value for the field, expressed as a Neuroscript literal (see [cite: uploaded:neuroscript/docs/NeuroData/map_literal.md]).
+    * `default`: (Optional) A default value for the field, expressed as a Neuroscript literal (see [map_literal.md](map_literal.md)).
     * Other constraints: (Optional) e.g., `minLength`, `maxLength` (for strings), `minimum`, `maximum` (for numbers), `pattern` (regex for strings).

 ## Example
@@ -38,4 +38,4 @@
 ```

 ## Implementation Notes
-* Validation tools can use this schema to check if a `vdlt.map_literal.v1` instance conforms to the defined structure and constraints.
\ No newline at end of file
+* Validation tools can use this schema to check if a `vdlt.map_literal.v1` instance conforms to the defined structure and constraints.
--- a/docs/NeuroData/references.md
+++ b/docs/NeuroData/references.md
@@ -1,7 +1,7 @@
 # Neurodata References Specification (`vdlt.references.v1`)

 ## Overview
-This document specifies the `vdlt.references.v1` Neurodata format, used for declaring references to other data entities, code artifacts, or external resources within Neurodata files. It uses the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]), security considerations ([cite: uploaded:neuroscript/pkg/core/security.go]), and is processed by the block extractor ([cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_extractor.go]).
+This document specifies the `vdlt.references.v1` Neurodata format, used for declaring references to other data entities, code artifacts, or external resources within Neurodata files. It uses the core metadata specification ([metadata.md](../../docs/metadata.md)), the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)), security considerations ([security.go](../../pkg/core/security.go)), and is processed by the block extractor ([blocks_extractor.go](../../pkg/neurodata/blocks/blocks_extractor.go)).

 References allow decoupling definitions from usage and promote reusability.

@@ -16,19 +16,19 @@
 ## Reference String Format `<type>:<path_or_identifier>[#<sub_selector>]`

 ### Types
-* `local` or `embed`: Fetched/validated using local file system access, subject to security policy ([cite: uploaded:neuroscript/pkg/core/security.go]). `embed` suggests the content should ideally be pulled into the referencing document during processing. Path is relative to the current file or project root based on context.
-* `metadata`: References another metadata block ([cite: uploaded:neuroscript/docs/metadata.md]) within the same or another composite file. Path is typically the `id` of the target metadata block.
-* `block`: References a specific named block within the same or another composite file (requires block parsing, see [cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_extractor.go)). Path uses the `id` from the target block's metadata.
+* `local` or `embed`: Fetched/validated using local file system access, subject to security policy ([security.go](../../pkg/core/security.go)). `embed` suggests the content should ideally be pulled into the referencing document during processing. Path is relative to the current file or project root based on context.
+* `metadata`: References another metadata block ([metadata.md](../../docs/metadata.md)) within the same or another composite file. Path is typically the `id` of the target metadata block.
+* `block`: References a specific named block within the same or another composite file (requires block parsing, see [blocks_extractor.go](../../pkg/neurodata/blocks/blocks_extractor.go)). Path uses the `id` from the target block's metadata.
 * `http` or `https`: Standard URL for web resources. Access subject to security policy.
 * `git`: References a file within a Git repository (e.g., `git:https://github.com/user/repo.git/path/to/file.txt#commit_hash_or_branch`). Resolution requires Git tools and is subject to security policy.
 * `schema`: Specifically references a schema definition (e.g., `schema:my_map_schema`). Resolution might involve looking up known schemas or using other references.
 * `key`: References a cryptographic key definition (e.g., `key:signing_key_1`). Used within `vdlt.cryptographic.v1`.
 * Custom types: Domain-specific reference types can be defined.

 ### Sub-Selectors (`#<sub_selector>`)
-* Optional part used to pinpoint content *within* the referenced resource (e.g., a specific line number `#L10`, a section heading `#overview`, a JSON pointer `# /path/to/element`, a block name within a composite file `#block_id`). The interpretation depends on the resource type and the processing tool.
-* Integration with Neuroscript tools ([cite: uploaded:neuroscript/pkg/core/tools_metadata.go], [cite: uploaded:neuroscript/pkg/neurodata/blocks/blocks_tool.go]).
+* Optional part used to pinpoint content *within* the referenced resource (e.g., a specific line number `#L10`, a section heading `#overview`, a JSON pointer `# /path/to/element`, a block name within a composite file `#block_id`). The interpretation depends on the resource type and the processing tool.
+* Integration with Neuroscript tools ([tools_metadata.go](../../pkg/core/tools_metadata.go), [blocks_tool.go](../../pkg/neurodata/blocks/blocks_tool.go)).

 ## Reference Block Format (`@references`)

@@ -45,4 +45,4 @@
 ## Resolution

 Reference resolution (fetching and interpreting the referenced content) is the responsibility of the tool processing the Neurodata file.
-Reference resolution MUST adhere to the project's security policy ([cite: uploaded:neuroscript/pkg/core/security.go]), especially for `local`, `http`, `git`, and potentially `block` types.
+Reference resolution MUST adhere to the project's security policy ([security.go](../../pkg/core/security.go)), especially for `local`, `http`, `git`, and potentially `block` types.
--- a/docs/NeuroData/symbolic_math.md
+++ b/docs/NeuroData/symbolic_math.md
@@ -1,7 +1,7 @@
 # Neurodata Symbolic Math Specification (`vdlt.symbolic_math.v1`)

 ## Overview
-This document specifies the `vdlt.symbolic_math.v1` Neurodata format for representing mathematical expressions symbolically. It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), references ([cite: uploaded:neuroscript/docs/references.md]), the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]), and potentially map literals ([cite: uploaded:neuroscript/docs/NeuroData/map_literal.md]) or schemas ([cite: uploaded:neuroscript/docs/NeuroData/map_schema.md]) for variable definitions.
+This document specifies the `vdlt.symbolic_math.v1` Neurodata format for representing mathematical expressions symbolically. It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)), references ([references.md](references.md)), the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)), and potentially map literals ([map_literal.md](map_literal.md)) or schemas ([map_schema.md](map_schema.md)) for variable definitions.

 This allows defining mathematical formulae, equations, or constraints that can be parsed, manipulated, or evaluated by symbolic math libraries or Neuroscript itself.

@@ -14,7 +14,7 @@
 ## Structure

 A `vdlt.symbolic_math.v1` block contains definitions for variables, constants, and expressions/equations.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.symbolic_math.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.symbolic_math.v1`.
 * Optional References Block (`@references`): To link to standard math libraries or custom function definitions.
 * Optional Variable Schema Block (`@schema`): Defines expected variables and their types using `vdlt.map_schema.v1`.
 * Optional Variables Block (`@variables`): Assigns concrete values or ranges to variables using `vdlt.map_literal.v1`.
@@ -39,12 +39,12 @@
 * Equations: Use `==` for equality constraints.
 * Inequalities: Use `<`, `<=`, `>`, `>=`.
 * Function Calls: Standard function call syntax `func(arg1, arg2)`. Functions might be standard math functions (sin, cos, log) or defined elsewhere via references.
-* Variables: Defined using standard Neuroscript map syntax (see [cite: uploaded:neuroscript/docs/NeuroData/map_literal.md]).
+* Variables: Defined using standard Neuroscript map syntax (see [map_literal.md](map_literal.md)).

 ### @metadata Block
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.symbolic_math.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.symbolic_math.v1`.

 ### @references Block
 Optional. Allows linking to external math libraries or function definitions.
@@ -53,7 +53,7 @@
 Optional. Defines expected variables and their types/constraints.
 ```
 @schema
-type: ref:local:./variable_schemas.nd # Using vdlt.map_schema.v1 format ([cite: uploaded:neuroscript/docs/NeuroData/map_schema.md])
+type: ref:local:./variable_schemas.nd # Using vdlt.map_schema.v1 format ([map_schema.md](map_schema.md])
 ```

 ### @variables Block
@@ -77,8 +77,8 @@
 ```

 ## Semantics
-The interpretation of the expressions depends on the processing tool. It could involve:
+The interpretation of the expressions depends on the processing tool. It could involve:
 * Parsing into an abstract syntax tree (AST).
 * Symbolic manipulation (simplification, differentiation, integration).
 * Numerical evaluation given values in the `@variables` block.
-* Constraint satisfaction.
\ No newline at end of file
+* Constraint satisfaction.
+* The expression syntax should align closely with Neuroscript expression rules ([script spec.md](../../docs/script spec.md)), supporting standard arithmetic and logical operators, function calls (potentially defined within the symbolic context or via references), and variable usage.
+* Variables used in expressions should be defined in the `@variables` block ([map_literal.md](map_literal.md)).
--- a/docs/NeuroData/table.md
+++ b/docs/NeuroData/table.md
@@ -1,7 +1,7 @@
 # Neurodata Table Specification (`vdlt.table.v1`)

 ## Overview
-This document specifies the `vdlt.table.v1` Neurodata format for representing tabular data. It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]), and uses Neuroscript syntax for cell values ([cite: uploaded:neuroscript/docs/script spec.md]).
+This document specifies the `vdlt.table.v1` Neurodata format for representing tabular data. It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)), the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)), and uses Neuroscript syntax for cell values ([script spec.md](../../docs/script spec.md)).

 This format provides a more structured alternative to CSV, allowing richer data types within cells and explicit header definition.

@@ -15,13 +15,13 @@
 ## Structure

 A `vdlt.table.v1` block contains a header row and data rows.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.table.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.table.v1`.
 * Table Content: Pipe-separated values (`|`).

 ## Syntax
 * The first non-empty, non-comment line defines the header row. Columns are separated by `|`. Leading/trailing pipes are optional but recommended for clarity.
 * A separator line consisting of dashes (`---`) and pipes (`|`) *must* follow the header row to distinguish it from data rows. The number of dashes is not significant, but pipes should align with header pipes.
-* Subsequent non-empty lines are data rows, with cells separated by `|`.
+* Subsequent non-empty lines are data rows, with cells separated by `|`.
 * Cell Content: Can be any valid Neuroscript literal (string, number, boolean, simple list/map if unambiguous). Whitespace around cell content is typically trimmed unless the content is quoted. Use quotes (`"..."`) if cell content needs to include the pipe character (`|`) or leading/trailing whitespace.
 * Comments: Lines starting with `#` are ignored.

@@ -29,7 +29,7 @@

 ### Simple Table
 ```
-%%% vdlt.table.v1
+%%% vdlt.table.v1
 description: User Information
 %%%
 | Name      | Age | City          |
@@ -41,7 +41,7 @@

 ### Table with Quoted Content and Neuroscript Literals
 ```
-%%% vdlt.table.v1
+%%% vdlt.table.v1
 description: Data with varied types
 %%%
 | ID | Value | List      | Active | Notes                       |
--- a/docs/NeuroData/templates.md
+++ b/docs/NeuroData/templates.md
@@ -1,7 +1,7 @@
 # Neurodata Template Specification (`vdlt.template.v1`)

 ## Overview
-This document specifies the `vdlt.template.v1` Neurodata format, used for text templating with embedded Neuroscript expressions. It relies on the Neuroscript language specification ([cite: uploaded:neuroscript/docs/script spec.md]), the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]), and potentially references ([cite: uploaded:neuroscript/docs/references.md]) for including sub-templates or data.
+This document specifies the `vdlt.template.v1` Neurodata format, used for text templating with embedded Neuroscript expressions. It relies on the Neuroscript language specification ([script spec.md](../../docs/script spec.md)), the core metadata specification ([metadata.md](../../docs/metadata.md)), and potentially references ([references.md](references.md)) for including sub-templates or data.

 This format allows generating text documents (like reports, code, configuration files) by embedding Neuroscript expressions within literal text.

@@ -40,8 +40,8 @@
 * `if`/`else`/`endif`: Conditional blocks.
 * `for`/`endfor`: Looping constructs (e.g., iterating over a list variable).

-The evaluation logic ([cite: uploaded:neuroscript/pkg/core/evaluation_main.go]) handles the execution of these expressions.
-Standard Neuroscript string functions ([cite: uploaded:neuroscript/pkg/core/tools_string.go]) are available within expressions.
+The evaluation logic ([evaluation_main.go](../../pkg/core/evaluation_main.go)) handles the execution of these expressions.
+Standard Neuroscript string functions ([tools_string.go](../../pkg/core/tools_string.go)) are available within expressions.

 ## Semantics

--- a/docs/NeuroData/tree.md
+++ b/docs/NeuroData/tree.md
@@ -1,7 +1,7 @@
 # Neurodata Tree Specification (`vdlt.tree.v1`)

 ## Overview
-This document specifies the `vdlt.tree.v1` Neurodata format for representing hierarchical tree structures, extending the concept of graphs ([cite: uploaded:neuroscript/docs/neurodata/graph.md]). It relies on the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]) and the composite file structure ([cite: uploaded:neuroscript/docs/neurodata_and_composite_file_spec.md]).
+This document specifies the `vdlt.tree.v1` Neurodata format for representing hierarchical tree structures, extending the concept of graphs ([graph.md](graph.md)). It relies on the core metadata specification ([metadata.md](../../docs/metadata.md)) and the composite file structure ([neurodata_and_composite_file_spec.md](../../docs/neurodata_and_composite_file_spec.md)).

 Trees are a specialized form of graph where nodes have parent-child relationships, forming a hierarchy with a single root (or multiple roots forming a forest). This format uses indentation to represent these relationships naturally.

@@ -15,7 +15,7 @@
 ## Structure

 A `vdlt.tree.v1` block contains nodes defined by their text and indentation level.
-* Metadata Block: As defined in [cite: uploaded:neuroscript/docs/metadata.md], specifying `vdlt.tree.v1`.
+* Metadata Block: As defined in [metadata.md](../../docs/metadata.md), specifying `vdlt.tree.v1`.
 * Optional References Block (`@references`): To link node attributes or types to external definitions.
 * Tree Nodes: Lines representing nodes, with indentation indicating hierarchy.

@@ -28,7 +28,7 @@

 ### Simple Tree
 ```
-%%% vdlt.tree.v1
+%%% vdlt.tree.v1
 description: File system structure
 %%%
 root/
@@ -41,7 +41,7 @@

 ### Tree with Attributes (Using Map Literals)
 ```
-%%% vdlt.tree.v1
+%%% vdlt.tree.v1
 description: Scene graph with node attributes
 %%%
 Scene { name: "Main Scene", background_color: "#FAFAFA" }
--- a/docs/script spec.md
+++ b/docs/script spec.md
@@ -210,7 +210,7 @@
     * Strings: `==`, `!=`, `<`, `<=`, `>`, `>=` (lexicographical)
     * Booleans: `==`, `!=`
     * Lists/Maps: `==`, `!=` (deep comparison for equality of value)
-    * See [cite: uploaded:neuroscript/pkg/core/evaluation_comparison.go]
+    * See [evaluation_comparison.go](../pkg/core/evaluation_comparison.go)
 * Logical Operators: `&&` (AND), `||` (OR), `!` (NOT)
 * Bitwise Operators: `&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (Left Shift), `>>` (Right Shift)

@@ -233,7 +233,7 @@
 ### Procedures (`proc`)

 Procedures are defined using the `proc` keyword. They can accept parameters and return values.
-* Docstrings: Standard Go `/**/` or `//` comments immediately preceding the declaration are parsed ([cite: uploaded:neuroscript/pkg/core/parseDocstring.go]).
+* Docstrings: Standard Go `/**/` or `//` comments immediately preceding the declaration are parsed ([parseDocstring.go](../pkg/core/parseDocstring.go)).

 ```neuroscript
 proc greet(name string) string {
@@ -300,7 +300,7 @@
 * `vector`:
     * `vector_create`: Creates embeddings for text.
     * `vector_similarity`: Calculates similarity between vectors.
-    * `vector_search`: Performs similarity search (see [cite: uploaded:neuroscript/pkg/core/tools_vector.go] and [cite: uploaded:neuroscript/pkg/core/tools_search.go]).
+    * `vector_search`: Performs similarity search (see [tools_vector.go](../pkg/core/tools_vector.go) and [tools_search.go](../pkg/core/tools_search.go)).
 * `log`:
     * `log_info`, `log_warn`, `log_error`: Write messages to the log.
 * `metadata`:
@@ -335,5 +335,5 @@
 * **Tool Documentation**: Tools defined in Go should have standard Go docstrings explaining their purpose, parameters, and return values.
 * **Parameter Schema**: Tools should define a schema for their expected arguments (types, required/optional). This schema is used for validation and potentially exposed to LLMs.
-* Tool documentation strings are parsed using Go's docstring conventions ([cite: uploaded:neuroscript/pkg/core/parseDocstring.go]).
-* Neuroscript procedures also support docstrings, following the same convention ([cite: uploaded:neuroscript/docs/script spec.md]).
+* Tool documentation strings are parsed using Go's docstring conventions ([parseDocstring.go](../pkg/core/parseDocstring.go)).
+* Neuroscript procedures also support docstrings, following the same convention ([script spec.md](script spec.md)).
 ## Error Handling
--- a/docs/specification_structure.md
+++ b/docs/specification_structure.md
@@ -1,7 +1,7 @@
 # Standard Structure for Neurodata Format Specifications

 ## Overview
-This document outlines the standard structure for Neurodata format specification documents. It relies on the core metadata format ([cite: uploaded:neuroscript/docs/metadata.md]). Consistency across specification documents aids readability and tool development.
+This document outlines the standard structure for Neurodata format specifications. It relies on the core metadata format ([metadata.md](metadata.md)). Consistency across specification documents aids readability and tool development.

 While not rigidly enforced, new format specifications should strive to follow this structure.

@@ -59,4 +59,4 @@
 ## References
 * List any external standards, specifications, or documents referenced (e.g., RFCs, ISO standards).
 * Include links to related internal documents.
-* Links to the core metadata specification ([cite: uploaded:neuroscript/docs/metadata.md]) and other relevant base specifications (e.g., composite files, references).
+* Links to the core metadata specification ([metadata.md](metadata.md)) and other relevant base specifications (e.g., composite files, references).