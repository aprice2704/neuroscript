# Makefile for NeuroScript Project

# Go variables
GO := go
GOFLAGS :=
# Define the canonical installation directory for Go binaries
BIN_INSTALL_DIR := $(or $(shell go env GOBIN),$(shell go env GOPATH)/bin)

# Directories
ROOT_DIR        := $(shell pwd)
CMDS_DIR        := $(ROOT_DIR)/cmd
PKG_DIR         := $(ROOT_DIR)/pkg
VSCODE_EXT_DIR  := $(ROOT_DIR)/vscode-neuroscript
VSCODE_SERVER_DIR := $(VSCODE_EXT_DIR)/server
VIM_PLUGIN_DIR  := $(ROOT_DIR)/vim-neuroscript

# ------------------------------------------------------------------------------
# Dependency files
PROJECT_GO_MOD  := $(ROOT_DIR)/go.mod
PROJECT_GO_SUM  := $(ROOT_DIR)/go.sum

# ------------------------------------------------------------------------------
# ANTLR variables
ANTLR_JAR          := $(ROOT_DIR)/antlr4-4.13.2-complete.jar
G4_FILE            := $(PKG_DIR)/antlr/NeuroScript.g4
G4_TXT_FILE        := $(PKG_DIR)/antlr/NeuroScript.g4.txt
ANTLR_OUTPUT_DIR   := $(PKG_DIR)/antlr/generated
ANTLR_STAMP_FILE   := $(ANTLR_OUTPUT_DIR)/.antlr-generated-stamp

# ------------------------------------------------------------------------------
# Version file
VERSION_GO_FILE := $(PKG_DIR)/lang/version.go

# VSCode Extension Stamp File
VSCODE_BUILD_STAMP := $(VSCODE_EXT_DIR)/.vsix-built-stamp

# Doc file for GoLand setup
GOLAND_SETUP_DOC := $(ROOT_DIR)/GOLAND_SETUP.md

# Find all .go files in the pkg/ directory to use as dependencies for commands
ALL_PKG_GO_FILES := $(shell find $(PKG_DIR) -name '*.go')

# ------------------------------------------------------------------------------
# Versioning
NS_VERSION ?= $(shell grep '^const GrammarVersion' $(VERSION_GO_FILE) | awk '{print $$NF}' | tr -d '"')

# ------------------------------------------------------------------------------
# Default target
.PHONY: all
all: build

# ------------------------------------------------------------------------------
# Build the project
.PHONY: build
build: install $(G4_TXT_FILE) $(VSCODE_BUILD_STAMP)

# ------------------------------------------------------------------------------
# Install Go binaries
.PHONY: install
install: $(BIN_INSTALL_DIR)/nslsp

$(BIN_INSTALL_DIR)/nslsp: $(CMDS_DIR)/nslsp/main.go $(ALL_PKG_GO_FILES)
	@echo "Building nslsp..."
	$(GO) build -o $@ $(GOFLAGS) ./cmd/nslsp

# ------------------------------------------------------------------------------
# Generate ANTLR parser (only if grammar changes)
.PHONY: generate-antlr
generate-antlr: $(ANTLR_STAMP_FILE)

# Stamp target that triggers ANTLR regeneration & version.go update
$(ANTLR_STAMP_FILE): $(G4_FILE) $(ANTLR_JAR)
	@echo "Updating version.go from $(G4_FILE)..."
	@mkdir -p $(dir $(VERSION_GO_FILE))
	@{ \
		echo "// Code generated by Makefile – DO NOT EDIT."; \
		echo "package lang"; \
		echo; \
		echo "// GrammarVersion is extracted from the ANTLR g4 file."; \
		echo "const GrammarVersion = \"`grep '// Grammar: NeuroScript Version:' $(G4_FILE) | awk '{print $$NF}'`\""; \
	} > $(VERSION_GO_FILE)

	@echo "Generating ANTLR parser files from $(G4_FILE)..."
	@mkdir -p $(ANTLR_OUTPUT_DIR)
	@java -jar $(ANTLR_JAR) -Dlanguage=Go -o $(ANTLR_OUTPUT_DIR) \
		-visitor -listener -package generated $(G4_FILE)

	@touch $@

# ------------------------------------------------------------------------------
# Clean generated artifacts
.PHONY: clean
clean:
	-rm -rf $(BIN_INSTALL_DIR)/nslsp
	-rm -rf $(ANTLR_OUTPUT_DIR)
	-rm -f $(ANTLR_STAMP_FILE)
	-rm -f $(G4_TXT_FILE)

# ------------------------------------------------------------------------------
# VSCode extension build (calls npm/yarn inside sub‑dir)
$(VSCODE_BUILD_STAMP):
	@echo "Building VSCode extension..."
	@cd $(VSCODE_EXT_DIR) && npm install && npm run package
	@touch $@

# ------------------------------------------------------------------------------
# Helpers
.PHONY: fmt
fmt:
	$(GO) fmt ./...

.PHONY: vet
vet:
	$(GO) vet ./...

.PHONY: test
test:
	$(GO) test ./...

# ------------------------------------------------------------------------------
# Phony target groupings
.PHONY: ci
ci: fmt vet test build

.PHONY: help
help:
	@echo "Targets:"
	@echo "  build             – Build binaries & extension"
	@echo "  generate-antlr    – Regenerate parser from grammar"
	@echo "  clean             – Remove generated artifacts"
	@echo "  fmt | vet | test  – Standard Go helper targets"
	@echo "  ci                – fmt + vet + test + build"