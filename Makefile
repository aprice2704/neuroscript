# Makefile for NeuroScript Project
# file_version: 13

# Directories
ROOT_DIR        := $(shell pwd)
PKG_DIR         := $(ROOT_DIR)/pkg
CMDS_DIR        := $(ROOT_DIR)/cmd
VSCODE_EXT_DIR  := $(ROOT_DIR)/../ns_ide/vscode-neuroscript
VSCODE_SERVER_DIR := $(VSCODE_EXT_DIR)/server
VIM_PLUGIN_DIR  := $(ROOT_DIR)/../ns_ide/vim-neuroscript
G4_FILE         := $(PKG_DIR)/antlr/NeuroScript.g4

# Determine Go's binary installation path (GOBIN or GOPATH/bin)
GOBIN := $(shell go env GOBIN)
ifeq ($(GOBIN),)
  BIN_INSTALL_DIR := $(shell go env GOPATH)/bin
else
  BIN_INSTALL_DIR := $(GOBIN)
endif

# --- Versioning ---
G4_VERSION := $(shell grep -m 1 -i 'NeuroScript Version:' $(G4_FILE) | awk '{print $$NF}')
BUILD_TIMESTAMP := $(shell TZ='America/Los_Angeles' date +'%Y%m%d%H%M')

# --- Go Build Configuration ---
GO := go
GOFLAGS := -ldflags="-X 'main.AppVersion=$(BUILD_TIMESTAMP)'"

# Find all .go files in the project to use as dependencies
ALL_PKG_GO_FILES   := $(shell find $(PKG_DIR) -name '*.go')
NSLSP_GO_FILES     := $(shell find $(CMDS_DIR)/nslsp -name '*.go')
NG_GO_FILES        := $(shell find $(CMDS_DIR)/ng -name '*.go')

# ------------------------------------------------------------------------------
# ANTLR variables
ANTLR_JAR          := $(ROOT_DIR)/antlr4-4.13.2-complete.jar
ANTLR_OUTPUT_DIR   := $(PKG_DIR)/antlr/generated
ANTLR_STAMP_FILE   := $(ANTLR_OUTPUT_DIR)/.antlr-generated-stamp

# ------------------------------------------------------------------------------
# Version file
VERSION_GO_FILE := $(PKG_DIR)/lang/version.go

# ------------------------------------------------------------------------------
# Default target
.PHONY: all
all: build

# ------------------------------------------------------------------------------
# Build the project
.PHONY: build
build: install build-vscode

# ------------------------------------------------------------------------------
# Install Go binaries to the standard Go bin path
.PHONY: install
install: $(BIN_INSTALL_DIR)/nslsp $(BIN_INSTALL_DIR)/ng

$(BIN_INSTALL_DIR)/nslsp: $(NSLSP_GO_FILES) $(ALL_PKG_GO_FILES) $(ANTLR_STAMP_FILE)
	@echo "--> Installing nslsp Go binary to $(BIN_INSTALL_DIR)..."
	$(GO) install $(GOFLAGS) ./cmd/nslsp

$(BIN_INSTALL_DIR)/ng: $(NG_GO_FILES) $(ALL_PKG_GO_FILES) $(ANTLR_STAMP_FILE)
	@echo "--> Installing ng Go binary to $(BIN_INSTALL_DIR)..."
	$(GO) install $(GOFLAGS) ./cmd/ng

# ------------------------------------------------------------------------------
# Generate ANTLR parser (only if grammar changes)
.PHONY: generate-antlr
generate-antlr: $(ANTLR_STAMP_FILE)

$(ANTLR_STAMP_FILE): $(G4_FILE) $(ANTLR_JAR)
	@echo "--> Generating ANTLR parser and updating version..."
	@mkdir -p $(dir $(VERSION_GO_FILE))
	@{ \
		echo "// Code generated by Makefile â€“ DO NOT EDIT."; \
		echo "package lang"; \
		echo; \
		echo "// GrammarVersion is extracted from the ANTLR g4 file."; \
		echo "const GrammarVersion = \"$(G4_VERSION)\""; \
	} > $(VERSION_GO_FILE)

	@mkdir -p $(ANTLR_OUTPUT_DIR)
	@java -jar $(ANTLR_JAR) -Dlanguage=Go -o $(ANTLR_OUTPUT_DIR) \
		-visitor -listener -package generated $(G4_FILE)
	@touch $@

# ------------------------------------------------------------------------------
# VSCode extension build
.PHONY: build-vscode
build-vscode: $(BIN_INSTALL_DIR)/nslsp $(ANTLR_STAMP_FILE)
	@echo "--> Building VSCode extension..."
	@echo "    Copying nslsp from $(BIN_INSTALL_DIR) to $(VSCODE_SERVER_DIR)"
	@mkdir -p $(VSCODE_SERVER_DIR)
	@cp $(BIN_INSTALL_DIR)/nslsp $(VSCODE_SERVER_DIR)/nslsp_executable
	@echo "    Updating extension version to $(G4_VERSION)..."
	@if [ -z "$(G4_VERSION)" ]; then \
		echo "    WARNING: G4_VERSION is empty. Skipping VSCode extension version update."; \
	else \
		cd $(VSCODE_EXT_DIR) && npm version $(G4_VERSION) --no-git-tag-version --allow-same-version > /dev/null; \
	fi
	@echo "    Running npm install and packaging..."
	@cd $(VSCODE_EXT_DIR) && npm install --silent --no-fund --no-audit && npm run package
	@echo "    VSCode extension created."

# ------------------------------------------------------------------------------
# Vim plugin installation
.PHONY: install-vim
install-vim: $(BIN_INSTALL_DIR)/nslsp
	@echo "--> Installing Vim support..."
	@mkdir -p $(VIM_PLUGIN_DIR)/bin
	@cp $(BIN_INSTALL_DIR)/nslsp $(VIM_PLUGIN_DIR)/bin/
	@echo "    nslsp copied to $(VIM_PLUGIN_DIR)/bin/"
	@echo "    NOTE: Add the plugin directory to your Vim runtimepath and configure your LSP client."

# ------------------------------------------------------------------------------
# Clean generated artifacts
.PHONY: clean
clean:
	@echo "--> Cleaning project..."
	-rm -rf $(ANTLR_OUTPUT_DIR)
	-rm -f $(ANTLR_STAMP_FILE)
	-rm -rf $(VSCODE_EXT_DIR)/node_modules
	-rm -rf $(VSCODE_SERVER_DIR)
	-rm -f $(VSCODE_EXT_DIR)/*.vsix
	-rm -f $(VSCODE_EXT_DIR)/.vsix-built-stamp

# ------------------------------------------------------------------------------
# Go tools
.PHONY: fmt vet test
fmt:
	@echo "--> Formatting Go files..."
	$(GO) fmt ./...

vet:
	@echo "--> Vetting Go files..."
	$(GO) vet ./...

test:
	@echo "--> Running Go tests..."
	gotestsum ./...

# ------------------------------------------------------------------------------
# Phony target groupings
.PHONY: ci
ci: fmt vet test build

.PHONY: help
help:
	@echo "NeuroScript Build System"
	@echo "------------------------"
	@echo "Targets:"
	@echo "  all               - Build all artifacts (default)."
	@echo "  build             - Build Go binaries and VSCode extension."
	@echo "  install           - Build and install the nslsp and ng Go binaries."
	@echo "  build-vscode      - Build the VSCode .vsix extension."
	@echo "  install-vim       - Install the nslsp binary for Vim."
	@echo "  generate-antlr    - Regenerate parser from grammar."
	@echo "  clean             - Remove all generated artifacts."
	@echo "  fmt               - Format Go source files with go fmt."
	@echo "  vet               - Run go vet to check for issues."
	@echo "  test              - Run tests with go test."
	@echo "  ci                - Run all checks, tests, and build."