{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "NeuroScript",
  "scopeName": "source.neuroscript",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#literals" },
    { "include": "#placeholders" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.neuroscript",
          "match": "(#|--).*$"
        },
        {
          "begin": "\\b(COMMENT:)\\b",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.comment.neuroscript" }
          },
          "end": "\\b(ENDCOMMENT)\\b",
          "endCaptures": {
            "1": { "name": "punctuation.definition.comment.neuroscript" }
          },
          "name": "comment.block.neuroscript"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.neuroscript",
          "match": "\\b(IF|THEN|ELSE|WHILE|DO|FOR|EACH|IN|RETURN|END|ENDBLOCK)\\b"
        },
        {
          "name": "keyword.declaration.neuroscript",
          "match": "\\b(SPLAT|PROCEDURE)\\b"
        },
        {
          "name": "keyword.operator.word.neuroscript",
          "match": "\\b(TOOL|LLM|EMIT)\\b"
        },
        {
          "name": "keyword.other.neuroscript",
          "match": "\\b(SET|CALL)\\b"
        },
        {
          "name": "variable.language.neuroscript",
          "match": "\\b(__last_call_result)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.neuroscript",
          "begin": "\"",
          "end": "\"",
          "patterns": [{ "include": "#string_escapes" }]
        },
        {
          "name": "string.quoted.single.neuroscript",
          "begin": "'",
          "end": "'",
          "patterns": [{ "include": "#string_escapes" }]
        }
      ]
    },
    "string_escapes": {
      "name": "constant.character.escape.neuroscript",
      "match": "\\\\(?:['\"\\\\nrt]|u[0-9a-fA-F]{4})"
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.neuroscript",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "placeholders": {
      "begin": "\\{\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.neuroscript"
        }
      },
      "end": "\\}\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.end.neuroscript"
        }
      },
      "name": "meta.placeholder.neuroscript",
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "name": "variable.other.placeholder.neuroscript"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.neuroscript",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.neuroscript",
          "match": "\\+"
        },
        {
          "name": "keyword.operator.comparison.neuroscript",
          "match": "==|!=|>=|<=|>|<"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        { "name": "punctuation.separator.comma.neuroscript", "match": "," },
        { "name": "punctuation.separator.colon.neuroscript", "match": ":" },
        { "name": "punctuation.accessor.dot.neuroscript", "match": "\\." },
        {
          "name": "punctuation.section.parens.begin.neuroscript",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.neuroscript",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.brackets.begin.neuroscript",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.end.neuroscript",
          "match": "\\]"
        },
        {
          "name": "punctuation.section.braces.begin.neuroscript",
          "match": "\\{"
        },
        { "name": "punctuation.section.braces.end.neuroscript", "match": "\\}" }
      ]
    },
    "identifiers": {
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
      "name": "variable.other.neuroscript"
    }
  }
}
