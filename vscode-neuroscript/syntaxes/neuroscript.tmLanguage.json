{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "NeuroScript",
  "scopeName": "source.neuroscript",
  "patterns": [
    { "include": "#comments" },
    { "include": "#metadata" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#literals" },
    { "include": "#placeholders" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.neuroscript",
          "match": "(#|--).*$"
        },
        {
          "begin": "\\b(COMMENT:)\\b",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.comment.begin.neuroscript" }
          },
          "end": "\\b(ENDCOMMENT)\\b",
          "endCaptures": {
            "1": { "name": "punctuation.definition.comment.end.neuroscript" }
          },
          "name": "comment.block.editor.neuroscript"
        }
      ]
    },
    "metadata": {
      "patterns": [
        {
          "begin": "^(\\s*)(::)(\\s+)",
          "beginCaptures": {
            "0": {"name": "meta.metadata.line.neuroscript"},
            "1": { "name": "punctuation.whitespace.leading.metadata.neuroscript" },
            "2": { "name": "punctuation.definition.metadata.marker.neuroscript" },
            "3": { "name": "punctuation.whitespace.leading.key.metadata.neuroscript" }
          },
          "end": "(?=\\r?$|\\n)",
          "name": "meta.metadata.line.neuroscript",
          "patterns": [
            {
              "match": "\\b([a-zA-Z0-9_\\.-]+)(:)",
              "captures": {
                "1": { "name": "entity.name.tag.metadata.key.neuroscript" },
                "2": { "name": "punctuation.separator.key-value.metadata.neuroscript" }
              }
            },
            {
              "match": "[^\\n\\r]+",
              "name": "string.unquoted.metadata.value.neuroscript"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.neuroscript",
          "match": "\\b(if|else|endif|while|endwhile|for|each|in|endfor|on_error|endon|return|break|continue|fail|must|mustbe|clear_error)\\b"
        },
        {
          "name": "keyword.declaration.procedure.neuroscript",
          "match": "\\b(func|endfunc|needs|optional|returns|means)\\b"
        },
        {
          "name": "keyword.statement.neuroscript",
          "match": "\\b(set|call|emit|ask|into)\\b"
        },
        {
          "name": "constant.language.boolean.neuroscript",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "variable.language.special.neuroscript",
          "match": "\\b(last)\\b"
        },
        {
          "name": "support.function.builtin.neuroscript",
          "match": "\\b(eval|ln|log|sin|cos|tan|asin|acos|atan)\\b"
        },
        {
          "name": "keyword.other.tool.neuroscript",
          "match": "\\b(tool)(?=\\.)"
        },
        {
          "name": "keyword.operator.logical.word.neuroscript",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.unary.word.neuroscript",
          "match": "\\b(no|some)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.neuroscript",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "include": "#string_escapes" },
            { "include": "#placeholders" }
          ]
        },
        {
          "name": "string.quoted.single.neuroscript",
          "begin": "'",
          "end": "'",
          "patterns": [
            { "include": "#string_escapes" },
            { "include": "#placeholders" }
          ]
        },
        {
          "name": "string.quoted.raw.neuroscript",
          "begin": "```",
          "end": "```",
          "patterns": [
            { "include": "#placeholders" }
          ]
        }
      ]
    },
    "string_escapes": {
      "name": "constant.character.escape.neuroscript",
      "match": "\\\\(?:['\"\\\\nrt]|u[0-9a-fA-F]{4})"
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.neuroscript",
          "match": "\\b-?[0-9]+(?:\\.[0-9]+)?\\b"
        }
      ]
    },
    "placeholders": {
      "begin": "\\{\\{",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.template-expression.begin.neuroscript" }
      },
      "end": "\\}\\}",
      "endCaptures": {
        "0": { "name": "punctuation.definition.template-expression.end.neuroscript" }
      },
      "name": "meta.placeholder.neuroscript",
      "patterns": [
        {
          "match": "\\b(LAST|[a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "name": "variable.other.placeholder.neuroscript"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.neuroscript",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.neuroscript",
          "match": "\\*\\*|\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.comparison.neuroscript",
          "match": "==|!=|>=|<=|>|<"
        },
        {
          "name": "keyword.operator.bitwise.neuroscript",
          "match": "&|\\||\\^|~"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        { "name": "punctuation.separator.comma.neuroscript", "match": "," },
        { "name": "punctuation.separator.colon.neuroscript", "match": ":" },
        { "name": "punctuation.accessor.dot.neuroscript", "match": "\\." },
        { "name": "punctuation.section.parens.begin.neuroscript", "match": "\\(" },
        { "name": "punctuation.section.parens.end.neuroscript", "match": "\\)" },
        { "name": "punctuation.section.brackets.begin.neuroscript", "match": "\\[" },
        { "name": "punctuation.section.brackets.end.neuroscript", "match": "\\]" },
        { "name": "punctuation.section.braces.begin.neuroscript", "match": "\\{" },
        { "name": "punctuation.section.braces.end.neuroscript", "match": "\\}" }
      ]
    },
    "identifiers": {
      "patterns": [
         {
            "match": "(?<=\\bfunc\\s+)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*(?:\\(|\\bneeds\\b|\\boptional\\b|\\breturns\\b|\\bmeans\\b))",
            "name": "entity.name.function.definition.neuroscript"
        },
        {
            "match": "(?<=\\btool\\.)([a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*)",
            "name": "entity.name.function.tool.neuroscript"
        },
        {
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
            "name": "variable.other.neuroscript"
        }
      ]
    }
  }
}