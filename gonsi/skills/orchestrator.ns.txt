# Filename: skills/orchestrator.ns

DEFINE PROCEDURE HandleSkillRequest(task_description)
COMMENT:
    PURPOSE: Attempts to fulfill a task by finding or creating a NeuroScript skill.
             ** MVP Version: Assumes skill is NOT found and proceeds to creation. **
    INPUTS: - task_description: Natural language description of the desired skill/task.
    OUTPUT: Path to the relevant skill file, or status message.
    ALGORITHM:
        1. Call LLM to generate the NeuroScript code for the task.
        2. Strip code fences from the result.
        3. Sanitize task description for use as a filename base.
        4. Save the code using WriteFile.
        5. Index the new skill using VectorUpdate.
        6. Add and commit the new file using GitAdd and GitCommit.
        7. Return the path to the new skill file.
END

# --- MVP: Skip Search and IF/ELSE ---

# 1. Call LLM to generate the skill
# ** Updated Prompt: Re-emphasize NO FENCES **
# Define constraints clearly for the prompt
SET ns_syntax_rules = "NeuroScript Syntax Rules: " + \
    "1. Start with 'DEFINE PROCEDURE Name(args)'. " + \
    "2. Include a structured 'COMMENT:' block with PURPOSE:, INPUTS:, OUTPUT:, ALGORITHM:. " + \
    "3. Use 'SET var = expression' for ALL assignments. " + \
    "4. Use 'CALL ProcName(args...)' for ALL procedure/tool calls. Capture results with 'SET result = CALL ...'. " + \
    "5. The ONLY loop is 'FOR EACH var IN collection DO step'. No 'FOR i=...' loops. " + \
    "6. NO built-in functions like LEN or SUBSTR. Use simple string concatenation '+' if possible. " + \
    "7. Available tools: TOOL.ReadFile, TOOL.WriteFile, TOOL.SanitizeFilename, TOOL.VectorUpdate, TOOL.GitAdd, TOOL.GitCommit. " + \
    "8. End the procedure with 'END'."

# Construct the final prompt, embedding the rules and task description
SET generation_prompt = "Generate ONLY the raw NeuroScript code (no markdown fences or explanations) that strictly follows these rules: " + {{ns_syntax_rules}} + \
    " The procedure should perform the task: " + {{task_description}} + \
    " Ensure the final line is exactly 'END'."


CALL LLM({{generation_prompt}})
SET generated_code = __last_call_result

# 2. Sanitize filename and save
CALL TOOL.SanitizeFilename({{task_description}})
SET sanitized_base = __last_call_result
SET new_filepath = "skills/" + {{sanitized_base}} + ".ns" # Use sanitized name

CALL TOOL.WriteFile({{new_filepath}}, {{generated_code}})

# 3. Index and Commit
CALL TOOL.VectorUpdate({{new_filepath}})
CALL TOOL.GitAdd({{new_filepath}})
SET commit_msg = "AI: Add skill for task: " + {{task_description}} # Commit message uses original description
CALL TOOL.GitCommit({{commit_msg}})

RETURN "Created new skill (MVP): " + {{new_filepath}}

END