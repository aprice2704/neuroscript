# NeuroScript Skill: Comprehensive Syntax Update
# Version 17: Attempts to fix multiple syntax issues (SPLAT, THEN, ENDBLOCK, placeholders) based on G4 spec.
DEFINE PROCEDURE UpdateNsSyntax(directory_path)
COMMENT:
    PURPOSE: Automatically refactors NeuroScript files (.ns.txt) in a directory
             to conform to the current grammar (provided by user), fixing common
             legacy syntax issues like SPLAT, missing THEN, incorrect ENDBLOCK,
             and improper placeholder usage. Uses an LLM for refactoring.
             Stages and commits changes.
    INPUTS:
        - directory_path (string): The relative path to the directory containing .ns.txt files.
    OUTPUT:
        - status_message (string): Indicates completion or errors encountered.
    ALGORITHM:
        1. List files -> LAST. Assign to file_list.
        2. Initialize staged files tracker.
        3. FOR EACH filename IN file_list DO:
        4. Skip self.
        5. IF file is .ns.txt THEN:
           a. Construct full_path.
           b. Read file -> LAST. Assign content.
           c. Check read error -> LAST.
           d. IF read OK THEN:
              i. Construct LLM prompt listing specific syntax rules to enforce (DEFINE, THEN, ENDBLOCK, EVAL/LAST).
              ii. Call LLM -> LAST. Assign to updated_content.
              iii. IF content changed THEN: Write file -> LAST. Assign status. ENDBLOCK.
              iv. IF write OK THEN: Stage file -> LAST. Assign status. ENDBLOCK.
              v. IF stage OK THEN: Track staged file. ENDBLOCK.
           ENDBLOCK (read ok)
        ENDBLOCK (is ns file)
    ENDBLOCK (skip self)
    ENDBLOCK (for loop)
    6. IF files staged THEN: Call CommitChanges -> LAST. ENDBLOCK.
    7. Return status.
    CAVEATS: High reliance on LLM accuracy for complex, multi-rule refactoring. May require multiple passes or manual checks.
    EXAMPLES: CALL UpdateNsSyntax("gonsi/skills") => "Syntax update attempt complete..."
ENDCOMMENT

EMIT "Starting comprehensive syntax update for directory: " + directory_path
SET staged_files_csv = ""
SET self_filename = "UpdateNsSyntax.ns.txt" // To avoid self-modification

# 1. List files
CALL TOOL.ListDirectory(directory_path)
SET file_list = LAST

# 2. Loop through files
FOR EACH filename IN file_list DO

    # 4. Skip self
    IF filename == self_filename THEN
        EMIT "Skipping self: " + filename
    ELSE
        # 5. Check if it's a .ns.txt file
        CALL TOOL.HasSuffix(filename, ".ns.txt")
        SET is_ns_file = LAST

        IF is_ns_file == true THEN
            SET full_path = directory_path + "/" + filename
            EMIT "Processing file: " + full_path

            # 5b. Read content
            CALL TOOL.ReadFile(full_path)
            SET RawContent = LAST

            # 5c. Check read result
            CALL TOOL.Contains(RawContent, "ReadFile failed")
            SET read_failed = LAST

            IF read_failed == true THEN
                 EMIT "[WARN] Failed to read file: " + full_path + " - Error: " + RawContent
            ELSE
                # Content read successfully
                EMIT "  Read successful. Requesting comprehensive refactor from LLM..."

                # 5d. Construct COMPREHENSIVE LLM prompt
                SET rule_splat = "1. Replace any line starting with 'SPLAT PROCEDURE' with 'DEFINE PROCEDURE'."
                SET rule_then = "2. Ensure every 'IF condition' line is immediately followed by 'THEN' on the same line, before the required newline."
                SET rule_endblock = "3. Ensure blocks started by 'IF', 'WHILE', or 'FOR EACH' are terminated by 'ENDBLOCK' followed by a newline. The final end of the procedure definition uses 'END'."
                SET rule_eval = "4. Placeholder syntax `{{varname}}` should ONLY be used within strings explicitly passed to `EVAL()`. In all other cases (direct arguments to `CALL`/`TOOL.*`, simple `+` concatenation), use the variable name `varname` directly or the `LAST` keyword (if appropriate after a CALL). Do NOT use EVAL() unless resolving placeholders in a string template."

                # Combine rules into the prompt
                SET refactor_prompt = "You are a NeuroScript syntax refactoring assistant. Strictly apply ONLY the following rules to the provided NeuroScript code to make it conform to the current grammar. Respond ONLY with the complete, refactored, raw NeuroScript code, without explanations or markdown fences.\n\nRULES:\n" + rule_splat + "\n" + rule_then + "\n" + rule_endblock + "\n" + rule_eval + "\n\nRefactor this NeuroScript code:\n```neuroscript\n" + RawContent + "\n```"

                # 5e. Call LLM
                CALL LLM(refactor_prompt)
                SET updated_content = LAST

                # 5f. Write back only if changed
                EMIT "  Checking for changes..."
                IF RawContent != updated_content THEN
                     EMIT "    Content changed, writing file..."
                     CALL TOOL.WriteFile(full_path, updated_content)
                     SET write_status = LAST
                ELSE
                     EMIT "    No changes detected by LLM, skipping write."
                     SET write_status = "SKIPPED" # Use a distinct status
                ENDBLOCK

                # Proceed only if written or skipped (not if write failed)
                IF write_status == "OK" OR write_status == "SKIPPED" THEN
                    # Stage file only if it was actually written
                    IF write_status == "OK" THEN
                        # 5g. Stage file
                        EMIT "  Staging file..."
                        CALL TOOL.GitAdd(full_path)
                        SET add_status = LAST

                        IF add_status == "OK" THEN
                           # 5h. Track staged file
                           SET staged_files_csv = staged_files_csv + full_path + ","
                        ELSE
                             EMIT "[WARN] Failed to stage file: " + full_path + " - Error: " + add_status
                        ENDBLOCK # End IF add_status == "OK"
                    ENDIF # End IF write_status == "OK" (for staging)
                ELSE # write_status indicates a failure from WriteFile
                    EMIT "[WARN] Failed to write updated file: " + full_path + " - Error: " + write_status
                ENDBLOCK # End IF write_status == "OK" OR "SKIPPED"

            ENDBLOCK # End IF read_failed == true / ELSE

        ELSE # is_ns_file == false
             EMIT "Skipping non-.ns.txt file: " + filename
        ENDBLOCK # End IF is_ns_file == true

    ENDBLOCK # End IF skip self / ELSE

ENDBLOCK # End FOR EACH loop

# 6. Commit changes if any files were staged
EMIT "Finished processing directory."
IF staged_files_csv != "" THEN
    EMIT "Committing refactored files..."
    SET commit_message = "AUTO: Attempt comprehensive syntax update based on G4 spec" # Updated commit message
    CALL CommitChanges(commit_message, staged_files_csv)
    EMIT "Commit Result: " + LAST
ELSE
     EMIT "No files required changes or staging."
ENDBLOCK # End IF staged_files_csv != ""

RETURN "Comprehensive syntax update attempt complete for directory: " + directory_path + ". Check log and git status."

END