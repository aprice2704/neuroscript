# NeuroScript Skill: Refactor Placeholder Usage
# Version 12: Removes redundant {{var}} based on explicit EVAL rules using LLM.
DEFINE PROCEDURE UpdateNsSyntax(directory_path)
COMMENT:
    PURPOSE: Automatically refactors NeuroScript files (.ns.txt) in a directory
             to remove redundant placeholder syntax {{varname}} where direct
             variable name `varname` should be used (e.g., in CALL arguments
             or simple concatenation), according to the explicit EVAL model.
             Uses an LLM for the refactoring task. Stages and commits changes.
    INPUTS:
        - directory_path (string): The relative path to the directory containing .ns.txt files.
    OUTPUT:
        - status_message (string): Indicates completion or errors encountered.
    ALGORITHM:
        1. List files using TOOL.ListDirectory -> LAST.
        2. Initialize staged files tracker.
        3. Loop through files using FOR EACH filename IN file_list.
        4. Skip self (UpdateNsSyntax.ns.txt).
        5. If file is .ns.txt:
           a. Construct full_path.
           b. Read file content using TOOL.ReadFile -> LAST. Get raw content via RAWTEXT(LAST).
           c. Check for read errors.
           d. If read OK, construct LLM prompt asking to refactor based on explicit EVAL rules.
           e. Call LLM -> LAST.
           f. Write potentially updated content back using TOOL.WriteFile. Check status.
           g. If write OK, stage file using TOOL.GitAdd. Check status.
           h. If stage OK, track staged file.
        6. After loop, if files were staged, call CommitChanges procedure -> LAST.
        7. Return status.
    CAVEATS: Relies heavily on LLM understanding and correctly applying the refactoring rule.
             Does not currently compare if content actually changed before writing/staging.
             Assumes interpreter supports LAST, RAWTEXT, FOR EACH list, IF/ELSE, !=, ==.
    EXAMPLES: CALL UpdateNsSyntax("gonsi/skills") => "Placeholder refactoring attempt complete..."
ENDCOMMENT

EMIT "Starting placeholder refactor for directory: " + directory_path
SET staged_files_csv = ""
SET self_filename = "UpdateNsSyntax.ns.txt" // To avoid self-modification

# 1. List files
CALL TOOL.ListDirectory(directory_path)
SET file_list = LAST // Assign list result from LAST

# 2. Loop through files
FOR EACH filename IN file_list DO

    # 4. Skip self
    IF filename == self_filename THEN
        EMIT "Skipping self: " + filename
    ELSE
        # 5. Check if it's a .ns.txt file
        CALL TOOL.HasSuffix(filename, ".ns.txt")
        SET is_ns_file = LAST

        IF is_ns_file == true THEN
            SET full_path = directory_path + "/" + filename
            EMIT "Processing file: " + full_path

            # 5b. Read content - result is in LAST
            CALL TOOL.ReadFile(full_path)
            # Explicitly get the raw content without placeholder resolution
            SET __RawContent__ = RAWTEXT(LAST)

            # 5c. Check if the content *is* an error message from ReadFile
            CALL TOOL.Contains(__RawContent__, "ReadFile failed")
            IF LAST == true THEN
                 EMIT "[WARN] Failed to read file: " + full_path + " - Error: " + __RawContent__
            ELSE
                # Content read successfully, it's in __RawContent__.
                EMIT "  Read successful. Requesting refactor from LLM..."

                # 5d. Construct LLM prompt
                SET refactor_rule = "Apply the following rule: In NeuroScript code, placeholder syntax `{{varname}}` should ONLY be used within strings that are explicitly passed to an `EVAL()` function for template evaluation. In all other cases where the raw value of a variable is needed (e.g., as direct arguments to `CALL`, `TOOL.*`, or in simple `+` concatenation), use the variable name `varname` directly without curly braces. Refactor the provided code accordingly."

                SET refactor_prompt = refactor_rule + "\n\nRefactor this NeuroScript code:\n```neuroscript\n" + __RawContent__ + "\n```\n\nRespond ONLY with the complete, refactored, raw NeuroScript code, without any explanations or markdown fences."

                # 5e. Call LLM
                CALL LLM(refactor_prompt)
                SET updated_content = LAST // Result of LLM call

                # 5f. Write potentially updated content back
                EMIT "  Writing potential updates to file..."
                CALL TOOL.WriteFile(full_path, updated_content)
                SET write_status = LAST // Result of WriteFile ("OK" or error)

                IF write_status == "OK" THEN
                    # 5g. Stage file
                    EMIT "  Staging file..."
                    CALL TOOL.GitAdd(full_path)
                    SET add_status = LAST // Result of GitAdd ("OK" or error)

                    IF add_status == "OK" THEN
                       # 5h. Track staged file
                       SET staged_files_csv = staged_files_csv + full_path + ","
                    ELSE
                         EMIT "[WARN] Failed to stage file: " + full_path + " - Error: " + add_status
                    ENDBLOCK // End IF add_status == "OK"
                ELSE
                    EMIT "[WARN] Failed to write updated file: " + full_path + " - Error: " + write_status
                ENDBLOCK // End IF write_status == "OK"

            ENDBLOCK // End IF ReadFile success check
        ELSE
             EMIT "Skipping non-.ns.txt file: " + filename
        ENDBLOCK // End IF is_ns_file
    ENDBLOCK // End IF skip self

ENDBLOCK // End FOR EACH loop

# 6. Commit changes if any files were staged
EMIT "Finished processing directory."
IF staged_files_csv != "" THEN
    EMIT "Committing refactored files..."
    SET commit_message = "AUTO: Refactor redundant {{placeholders}} based on explicit EVAL rules"
    CALL CommitChanges(commit_message, staged_files_csv)
    EMIT "Commit Result: " + LAST // Display result of CommitChanges
ELSE
     EMIT "No files required changes or staging."
ENDBLOCK

RETURN "Placeholder refactoring attempt complete for directory: " + directory_path + ". Check log and git status."

END