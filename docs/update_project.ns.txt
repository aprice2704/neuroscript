DEFINE PROCEDURE UpdateProjectDocs(change_summary)
COMMENT:
    PURPOSE: Updates key project documentation files (README, checklist, prompts) AND checks for Go files needing refactoring based on a summary of recent code/spec changes. Uses LLM calls extensively.
    INPUTS:
      - change_summary: A string describing the recent changes made to the NeuroScript codebase or specifications.
    OUTPUT:
      - status_message: A string indicating success or failure.
    ALGORITHM:
        1. Define doc files list. Define relevant context files list.
        2. FOR EACH documentation file: (Conceptual Loop)
            a. Read doc file and context files.
            b. CALL LLM to generate updated doc content based on changes.
            c. Write updated content back to doc file.
            d. Add updated file to Git staging.
        3. Define Go source directory and line count threshold.
        4. CALL LLM to get a list of Go files in the directory (Conceptual - Needs TOOL.ListDirectory).
        5. FOR EACH Go file: (Conceptual Loop)
            a. Read Go file content.
            b. CALL LLM to get the line count (Conceptual - Needs TOOL.LineCount or similar).
            c. IF line count > threshold:
                i. CALL LLM to analyze the file and suggest refactoring.
                ii. Log or store refactoring suggestions (e.g., print to console for now).
        6. Create a final commit message including doc updates and refactoring check info.
        7. CALL CommitChanges procedure to finalize the commit.
        8. Return a success message.
    CAVEATS:
        - Major reliance on LLM for doc generation, file listing, line counting, and refactoring analysis.
        - Assumes LLM output can be reliably parsed/used.
        - Error handling is minimal.
        - List iteration is conceptual for the interpreter.
        - Needs new TOOLs (ListDirectory, LineCount) for full gonsi execution.
    EXAMPLES:
        CALL UpdateProjectDocs("Refactored interpreter.go into smaller files.") => "Documentation updated, refactoring checked, changes committed."
ENDCOMMENT

# --- Step 1: Define Files ---
SET doc_files_str = "README.md,development checklist.md,definition/develop prompt.txt,definition/execute prompt.txt"
SET doc_file_list = CALL TOOL.SplitString(doc_files_str, ",")
SET context_files_str = "pkg/core/interpreter.go,pkg/core/tools_register.go,definition/neuroscript spec.md,definition/formal spec.md"
SET context_file_list = CALL TOOL.SplitString(context_files_str, ",")
SET staged_files_csv = ""

# --- Step 2: Update Documentation (Conceptual Loop) ---
SET current_doc_file = "README.md"
SET current_doc_content = CALL TOOL.ReadFile(current_doc_file)
SET context_file_path = "pkg/core/interpreter.go"
SET context_file_content = CALL TOOL.ReadFile(context_file_path)

SET llm_prompt_docs = EVAL("Given the following changes: '" + change_summary + "'\n\n" + \
                 "And relevant context from '" + context_file_path + "':\n```go\n" + context_file_content + "\n```\n\n" + \
                 "Update the following documentation content from '" + current_doc_file + "'. " + \
                 "Maintain original format/style. Output ONLY the complete, updated file content.\n\n" + \
                 "Current content of '" + current_doc_file + "':\n```markdown\n" + current_doc_content + "\n```")
CALL LLM(llm_prompt_docs)
SET final_updated_content = LAST
CALL TOOL.WriteFile(current_doc_file, final_updated_content)
CALL TOOL.GitAdd(current_doc_file)
SET staged_files_csv = staged_files_csv + current_doc_file + ","


# --- Step 3-5: Check Go Files for Refactoring ---
SET go_src_dir = "pkg/core"
SET line_threshold_str = "200"

# Step 4: Get Go file list
SET llm_prompt_list_files = EVAL("List all files ending in .go within the directory '" + go_src_dir + "'. Output ONLY a comma-separated list of relative file paths (e.g., pkg/core/interpreter.go,pkg/core/lexer.go).")
CALL LLM(llm_prompt_list_files)
SET go_file_list_str = LAST
SET go_file_list = CALL TOOL.SplitString(go_file_list_str, ",")

# Step 5: Check each Go file
SET current_go_file = "pkg/core/evaluation.go"
SET go_file_content = CALL TOOL.ReadFile(current_go_file)

# Step 5b: Get line count
SET llm_prompt_line_count = EVAL("Count the number of lines in the following Go code from file '" + current_go_file + "'. Output ONLY the integer number.\n\n```go\n" + go_file_content + "\n```")
CALL LLM(llm_prompt_line_count)
SET line_count_str = LAST

# Step 5c: Check threshold
SET check_cond_str = line_count_str + " > " + line_threshold_str
SET should_analyze = "true"

IF should_analyze == "true" THEN
    SET llm_prompt_refactor = EVAL("The Go file '" + current_go_file + "' has " + line_count_str + " lines, exceeding the threshold of " + line_threshold_str + ". Analyze the following code and suggest how it could be split into smaller, more focused files or functions. Provide specific suggestions.\n\n```go\n" + go_file_content + "\n```")
    CALL LLM(llm_prompt_refactor)
    SET refactor_suggestion = LAST
    SET logged_suggestion = "Refactoring suggestion for " + current_go_file + ":\n" + refactor_suggestion
ENDBLOCK

# --- Step 6 & 7: Commit Changes ---
SET final_commit_message = EVAL("Docs: Update based on '" + change_summary + "'. Code: Refactoring check complete.")
CALL CommitChanges(final_commit_message, staged_files_csv)

# --- Step 8: Return Status ---
SET status_message = "Documentation updated, refactoring checked, changes committed."
RETURN status_message

END
