// NeuroScript Version: 0.6.0
// File version: 6
// Purpose: Correctly implements the interpreter facade with distinct execution methods.
// filename: pkg/interp/interpreter.go
// nlines: 70
// risk_rating: HIGH

package interp

import (
	"context"
	"errors"
	"fmt"
	"io"

	"github.com/aprice2704/neuroscript/pkg/ast"
	"github.com/aprice2704/neuroscript/pkg/interfaces"
	"github.com/aprice2704/neuroscript/pkg/interpreter"
	"github.com/aprice2704/neuroscript/pkg/lang"
)

// Config holds the configuration for a facade instance.
type Config struct {
	Stdout io.Writer
}

// Interpreter is the runtime facade, wrapping the internal implementation.
type Interpreter struct {
	internal   *interpreter.Interpreter
	loadedTree *interfaces.Tree
}

// New creates and initializes a new interpreter facade.
func New(cfg *Config) *Interpreter {
	if cfg == nil {
		cfg = &Config{}
	}
	interpCfg := &interpreter.Config{Stdout: cfg.Stdout}
	return &Interpreter{
		internal: interpreter.New(interpCfg),
	}
}

// Load makes a tree available for subsequent execution calls on the interpreter.
func (i *Interpreter) Load(tree *interfaces.Tree) error {
	if tree == nil {
		return errors.New("cannot load a nil tree")
	}
	i.loadedTree = tree
	return nil
}

// ExecuteCommands finds and runs the command block in the loaded tree.
func (i *Interpreter) ExecuteCommands(ctx context.Context) (lang.Value, error) {
	if i.loadedTree == nil || i.loadedTree.Root == nil {
		return nil, errors.New("no script loaded to execute commands from")
	}

	if cmd, ok := i.loadedTree.Root.(*ast.CommandBlock); ok {
		err := i.internal.ExecuteCommandBlock(cmd)
		if err != nil {
			return nil, err
		}
		// Successful command execution returns Null.
		return lang.NullValue{}, nil
	}

	return nil, errors.New("no command block found in loaded script")
}

// Run finds and executes a named procedure from the loaded tree.
func (i *Interpreter) Run(ctx context.Context, procName string) (lang.Value, error) {
	// A full implementation would find the procedure in the loadedTree and execute it.
	return nil, fmt.Errorf("procedure execution for '%s' is not yet implemented", procName)
}

// EmitEvent finds and executes an event handler from the loaded tree.
func (i *Interpreter) EmitEvent(ctx context.Context, event lang.Value) error {
	// A full implementation would find the matching on_event block and execute it.
	return errors.New("event handling is not yet implemented")
}
