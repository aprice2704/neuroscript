// NeuroScript Version: 0.5.2
// File version: 1.0.0
// Purpose: A dedicated test file for the l-value helper functions, preserving key test cases from the phased development process.
// filename: pkg/interpreter/assignment_lvalue_helpers_test.go

package interpreter

import (
	"testing"

	"github.com/aprice2704/neuroscript/pkg/ast"
	"github.com/aprice2704/neuroscript/pkg/lang"
	"github.com/google/go-cmp/cmp"
)

// TestLValueHelpers runs the phased tests for the assignment helper functions.
func TestLValueHelpers(t *testing.T) {
	interp, err := newLocalTestInterpreter(t, nil, nil)
	if err != nil {
		t.Fatalf("Failed to create test interpreter: %v", err)
	}

	// --- Phase 1 Test Cases ---
	t.Run("Phase 1: BuildLHS_Representation", func(t *testing.T) {
		deeplyNestedAccessors := []*ast.AccessorNode{
			{Type: ast.DotAccess, Key: &ast.StringLiteralNode{Value: "b"}},
			{Type: ast.BracketAccess, Key: &ast.NumberLiteralNode{Value: int64(0)}},
			{Type: ast.BracketAccess, Key: &ast.StringLiteralNode{Value: "c"}},
			{Type: ast.DotAccess, Key: &ast.StringLiteralNode{Value: "d"}},
			{Type: ast.BracketAccess, Key: &ast.NumberLiteralNode{Value: int64(1)}},
		}

		expectedRep := &LHSTypeNode{
			Type: LHS_MAP,
			Children: map[string]*LHSTypeNode{
				"b": {
					Type: LHS_LIST,
					Elements: []*LHSTypeNode{
						{
							Type: LHS_MAP,
							Children: map[string]*LHSTypeNode{
								"c": {
									Type: LHS_MAP,
									Children: map[string]*LHSTypeNode{
										"d": {
											Type:     LHS_LIST,
											Elements: []*LHSTypeNode{},
										},
									},
								},
							},
						},
					},
				},
			},
		}

		rep, err := interp.buildLHS_Representation(deeplyNestedAccessors)
		if err != nil {
			t.Fatalf("buildLHS_Representation() failed: %v", err)
		}
		if diff := cmp.Diff(expectedRep, rep); diff != "" {
			t.Errorf("Representation mismatch (-want +got):\n%s", diff)
		}
	})

	// --- Phase 2 Test Cases ---
	t.Run("Phase 2: CreateStructureFromRep", func(t *testing.T) {
		// This representation comes from the successful Phase 1 test.
		rep := &LHSTypeNode{
			Type: LHS_MAP,
			Children: map[string]*LHSTypeNode{
				"b": {
					Type: LHS_LIST,
					Elements: []*LHSTypeNode{
						{ // Index 0
							Type: LHS_MAP,
							Children: map[string]*LHSTypeNode{
								"c": {
									Type:     LHS_MAP,
									Children: make(map[string]*LHSTypeNode),
								},
							},
						},
					},
				},
			},
		}

		// This is the expected empty structure.
		expectedValue := lang.NewMapValue(map[string]lang.Value{
			"b": lang.NewListValue([]lang.Value{
				lang.NewMapValue(map[string]lang.Value{
					"c": lang.NewMapValue(make(map[string]lang.Value)),
				}),
			}),
		})

		createdValue, err := interp.createStructureFromRep(rep)
		if err != nil {
			t.Fatalf("createStructureFromRep failed: %v", err)
		}
		if diff := cmp.Diff(expectedValue, createdValue); diff != "" {
			t.Errorf("Created structure mismatch (-want +got):\n%s", diff)
		}
	})
}
