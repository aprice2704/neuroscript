// NeuroScript Version: 0.7.0
// File version: 4
// Purpose: Fixed a bug where custom emit handlers were not propagated to clones, making SetEmitFunc unreliable for function calls.
// filename: pkg/interpreter/interpreter_clone.go
// nlines: 67
// risk_rating: HIGH

package interpreter

// Clone creates a new interpreter instance that is a child of the current one.
// The new instance shares the core, persistent state like account stores,
// model stores, and tool registries, ensuring that changes made through tools
// are reflected in the parent. The variable state is a deep copy to provide
// execution isolation.
func (i *Interpreter) Clone() *Interpreter {
	clone := &Interpreter{
		// Share core state by reference for persistence
		logger:              i.logger,
		fileAPI:             i.fileAPI,
		tools:               i.tools,
		eventManager:        i.eventManager,
		aiWorker:            i.aiWorker,
		stdout:              i.stdout,
		stdin:               i.stdin,
		stderr:              i.stderr,
		maxLoopIterations:   i.maxLoopIterations,
		bufferManager:       i.bufferManager,
		objectCache:         i.objectCache,
		llmclient:           i.llmclient,
		skipStdTools:        i.skipStdTools,
		modelStore:          i.modelStore,
		accountStore:        i.accountStore,
		ExecPolicy:          i.ExecPolicy,
		root:                i, // Link back to the parent
		aiTranscript:        i.aiTranscript,
		transientPrivateKey: i.transientPrivateKey,
		customEmitFunc:      i.customEmitFunc, // FIX: Propagate custom emit handler
	}

	// Deep copy the execution state for isolation
	clone.state = newInterpreterState()
	clone.state.providers = i.state.providers // Share provider instances

	// Find the ultimate root to copy global variables from
	root := i
	for root.root != nil {
		root = root.root
	}

	// Copy global variables from the root interpreter
	root.state.variablesMu.RLock()
	for name, value := range root.state.variables {
		if _, isGlobal := root.state.globalVarNames[name]; isGlobal {
			clone.state.variables[name] = value
			clone.state.globalVarNames[name] = true
		}
	}
	root.state.variablesMu.RUnlock()

	// Set up evaluation context for the clone
	clone.evaluate = &evaluation{i: clone}
	clone.customWhisperFunc = clone.defaultWhisperFunc

	return clone
}
