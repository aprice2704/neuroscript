// NeuroScript Version: 0.5.2
// File version: 1
// Purpose: Test suite for the metadata extraction tool.
// filename: pkg/tool/meta/tools_metadata_test.go
// nlines: 104
// risk_rating: LOW

package meta

import (
	"errors"
	"reflect"
	"testing"

	"github.com/aprice2704/neuroscript/pkg/interpreter"
	"github.com/aprice2704/neuroscript/pkg/lang"
	"github.com/aprice2704/neuroscript/pkg/tool"
)

// NOTE: This test file assumes that the function 'toolExtractMetadataFromString'
// in 'tools_metadata.go' is uncommented and that a function named
// 'Extract(string) (map[string]string, error)' exists in this package.

// testExtractMetadataHelper is the helper function for testing the metadata tool.
func testExtractMetadataHelper(t *testing.T, tc struct {
	name       string
	args       []interface{}
	setupFunc  func() // Placeholder for future setup needs
	wantResult map[string]interface{}
	wantErrIs  error
}) {
	t.Helper()
	t.Run(tc.name, func(t *testing.T) {
		interp := interpreter.NewInterpreter()

		// Manually define and register the tool for this test.
		// This is necessary as no tooldefs file was provided.
		metaTool := tool.ToolImplementation{
			Spec: tool.ToolSpec{Name: "ExtractMetadata", Group: "meta"},
			Func: toolExtractMetadataFromString, // This will fail to compile until uncommented
		}
		if err := interp.ToolRegistry().RegisterTool(metaTool); err != nil {
			t.Fatalf("Setup: failed to register tool %q: %v", metaTool.Spec.Name, err)
		}

		// Look up the tool
		toolImpl, ok := interp.ToolRegistry().GetTool("tool.meta.ExtractMetadata")
		if !ok {
			t.Fatalf("Tool 'tool.meta.ExtractMetadata' not found in registry")
		}

		// Execute the tool function
		gotResult, toolErr := toolImpl.Func(interp, tc.args)

		// Check for expected errors
		if tc.wantErrIs != nil {
			if !errors.Is(toolErr, tc.wantErrIs) {
				t.Errorf("Expected error wrapping [%v], but got: %v", tc.wantErrIs, toolErr)
			}
			return // Don't check result if an error was expected
		}
		if toolErr != nil {
			t.Fatalf("Unexpected error: %v", toolErr)
		}

		// Check the result
		if !reflect.DeepEqual(gotResult, tc.wantResult) {
			t.Errorf("Result map mismatch:\nGot:  %#v\nWant: %#v", gotResult, tc.wantResult)
		}
	})
}

// TestToolExtractMetadata contains the test cases for the metadata extraction tool.
func TestToolExtractMetadata(t *testing.T) {
	// This is a placeholder implementation for the 'Extract' function.
	// The test will fail until the actual implementation is provided in the package.
	Extract = func(s string) (map[string]string, error) {
		if s == "key1: value1\nkey2: value2" {
			return map[string]string{"key1": "value1", "key2": "value2"}, nil
		}
		return make(map[string]string), nil
	}

	tests := []struct {
		name       string
		args       []interface{}
		setupFunc  func()
		wantResult map[string]interface{}
		wantErrIs  error
	}{
		{
			name: "Happy Path - Valid Metadata",
			args: []interface{}{"key1: value1\nkey2: value2"},
			wantResult: map[string]interface{}{
				"key1": "value1",
				"key2": "value2",
			},
		},
		{
			name:       "No Metadata Found",
			args:       []interface{}{"just some regular text"},
			wantResult: map[string]interface{}{},
		},
		{
			name:       "Empty Input String",
			args:       []interface{}{""},
			wantResult: map[string]interface{}{},
		},
		{
			name:      "Error - Wrong Arg Count",
			args:      []interface{}{"arg1", "arg2"},
			wantErrIs: lang.ErrArgumentMismatch,
		},
		{
			name:      "Error - Wrong Arg Type",
			args:      []interface{}{42},
			wantErrIs: lang.ErrInvalidArgument,
		},
	}

	for _, tt := range tests {
		testExtractMetadataHelper(t, tt)
	}
}
