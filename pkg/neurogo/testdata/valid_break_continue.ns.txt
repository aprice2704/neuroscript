:: Name: Break/Continue Tests
:: Purpose: Verify the functionality of break and continue statements in loops.
:: Version: 1.0.2
:: Author: Gemini

# --- Test Procedures ---

func test_while_break() means
  # Description: Tests 'break' exiting a while loop early.
  set counter = 0
  set result = 0
  while counter < 10
    if counter == 3
      # Expected to exit loop here
      break
    endif
    set result = result + counter # 0 + 1 + 2 = 3
    set counter = counter + 1
  endwhile
  # Assert final result after break
  must result == 3
  must counter == 3 # Counter should be 3 when break occurred
endfunc

func test_while_continue() means
  # Description: Tests 'continue' skipping an iteration in a while loop.
  set counter = 0
  set result = 0
  while counter < 5
    set counter = counter + 1
    if counter == 3
      # Expected to skip the `set result` for counter=3
      continue
    endif
    # Should execute for counter = 1, 2, 4, 5
    set result = result + counter # 1 + 2 + 4 + 5 = 12
  endwhile
  # Assert final result after continue
  must result == 12
  must counter == 5 # Counter should reach the end
endfunc

func test_for_break() means
  # Description: Tests 'break' exiting a for each loop early.
  set items = ["a", "b", "stop", "c", "d"]
  set processed = 0 # Use a number counter for simplicity
  for each item in items
    if item == "stop"
      break
    endif
    set processed = processed + 1 # Counting items processed
  endfor
  # Assert final count after break
  must processed == 2 # Processed "a", "b"
endfunc

func test_for_continue() means
  # Description: Tests 'continue' skipping an item in a for each loop.
  set items = [1, 2, 3, 4, 5]
  set total = 0
  for each num in items
    if num == 3
      continue # Skip adding 3
    endif
    set total = total + num # 1 + 2 + 4 + 5 = 12
  endfor
  # Assert final total after continue
  must total == 12
endfunc

func test_nested_break() means
  # Description: Tests 'break' only affects the inner loop.
  set outer_loops = 0
  set inner_loops_total = 0
  set outer_val = 0
  while outer_val < 3
    set outer_loops = outer_loops + 1
    set inner_val = 0
    while inner_val < 5
      if inner_val == 2
        break # Break inner loop only
      endif
      set inner_loops_total = inner_loops_total + 1 # Count successful inner iterations
      set inner_val = inner_val + 1
    endwhile
    # Inner loop broken after inner_val=0, inner_val=1
    set outer_val = outer_val + 1
  endwhile
  # Outer loop should run 3 times
  # Inner loop should add 2 iterations each time (0, 1) -> 2 * 3 = 6 total
  must outer_loops == 3
  must inner_loops_total == 6
endfunc

func test_nested_continue() means
  # Description: Tests 'continue' only affects the inner loop.
  set outer_loops_c = 0
  set inner_loops_total_c = 0
  set outer_val_c = 0
  while outer_val_c < 2
    set outer_loops_c = outer_loops_c + 1
    set inner_val_c = 0
    while inner_val_c < 4
      set inner_val_c = inner_val_c + 1 # Increment first
      if inner_val_c == 2
        continue # Continue inner loop, skipping the add below for inner_val_c = 2
      endif
      set inner_loops_total_c = inner_loops_total_c + 1 # Count successful adds
    endwhile
    # Inner loop adds for inner_val_c = 1, 3, 4 -> 3 adds per outer loop
    set outer_val_c = outer_val_c + 1
  endwhile
  # Outer loop runs 2 times
  # Inner loop adds 3 times per outer loop -> 3 * 2 = 6 total adds
  must outer_loops_c == 2
  must inner_loops_total_c == 6
endfunc

func test_last_statement_break() means
  # Description: Tests 'break' as the last statement in a loop iteration.
    set i = 0
    set count = 0
    while i < 5
        set count = count + 1
        set i = i + 1
        if i == 3
            break # Last statement in loop body
        endif
    endwhile
    must count == 3 # Runs for i=0, i=1, i=2
    must i == 3
endfunc

func test_last_statement_continue() means
  # Description: Tests 'continue' as the last statement in a loop iteration.
    set i = 0
    set count = 0
    while i < 5
        set i = i + 1
        if i == 3
            continue # Last statement in loop body
        endif
        set count = count + 1 # Increments for i=1, 2, 4, 5
    endwhile
    must count == 4
    must i == 5
endfunc


# --- Main execution ---
# Wrap calls in a 'main' procedure as top-level calls are not allowed by grammar.
func main() means
  # Description: Entry point to run all break/continue tests.
  # Variables need to be declared/set here if they are not global
  # Assuming variables set in called functions are accessible globally for testing ease
  # If procedures have local scope, assertions need to be done differently.
  set counter = -1
  set result = -1
  set processed = -1
  set total = -1
  set outer_loops = -1
  set inner_loops_total = -1
  set outer_loops_c = -1
  set inner_loops_total_c = -1
  set i = -1
  set count = -1
  set sum = -1 # Initialize sum as well

  call test_while_break()
  call test_while_continue()
  set sum = result # Save result from test_while_continue as 'sum' for assertion
  call test_for_break()
  call test_for_continue()
  call test_nested_break()
  call test_nested_continue()
  call test_last_statement_break()
  call test_last_statement_continue()

endfunc