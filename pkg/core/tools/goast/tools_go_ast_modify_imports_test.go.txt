package main

import (
	"context"
	"flag"
	"fmt"
	"io" // Needed for io.Writer
	"log/slog" // Needed for slog
	"os"

	// ADJUST THESE IMPORT PATHS
	"github.com/aprice2704/neuroscript/internal/adapters/slogadapter" // Your adapter
	"github.com/aprice2704/neuroscript/internal/interfaces"        // Your logger interface
	"github.com/aprice2704/neuroscript/pkg/neurogo"
	"github.com/aprice2704/neuroscript/pkg/neurogo/tui"
)

// initializeLogger sets up the slog logger based on configuration strings.
func initializeLogger(levelStr string, filePath string) (logging.Logger, error) {
	var level slog.Level
	// Parse the log level string
	switch levelStr {
	case "debug":
		level = slog.LevelDebug
	case "info":
		level = slog.LevelInfo
	case "warn":
		level = slog.LevelWarn
	case "error":
		level = slog.LevelError
	default:
		return nil, fmt.Errorf("invalid log level: %q", levelStr)
	}

	var output io.Writer = os.Stderr // Default to stderr

	// If a log file path is provided, open or create the file
	if filePath != "" {
		file, err := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
		if err != nil {
			// Return error, cannot proceed with file logging
			return nil, fmt.Errorf("failed to open log file %q: %w", filePath, err)
		}
		// Note: Closing the file will be the responsibility of the caller or program exit.
		// If this function managed the file lifecycle completely, it would need to return the file handle too.
		// For simplicity here, we assume the file remains open for the application's lifetime.
		output = file
	}

	// Create the slog handler (TextHandler as requested)
	handlerOpts := &slog.HandlerOptions{
		Level: level,
		// AddSource: true, // Optionally add source file/line numbers
	}
	handler := slog.NewTextHandler(output, handlerOpts)

	// Create the slog logger
	slogLogger := slog.New(handler)

	// Create the adapter (using the constructor we defined earlier)
	// Note: Your adapter constructor might panic on nil, but we handle other potential errors.
	appLogger, err := slogadapter.NewSlogAdapter(slogLogger)
	if err != nil {
		// This might happen if the adapter constructor changes to return errors for other reasons
		return nil, fmt.Errorf("failed to create logger adapter: %w", err)
	}

	// Optionally set the global logger (useful for libraries that might use slog directly)
	// slog.SetDefault(slogLogger) // Uncomment if needed

	// Return the adapter which satisfies the logging.Logger interface
	return appLogger, nil
}

func main() {
	// --- Configuration Setup ---
	logFile := flag.String("log-file", "", "Path to log file (optional, defaults to stderr)") //
	logLevel := flag.String("log-level", "info", "Log level (debug, info, warn, error)")      //

	// ... rest of your flags ...
	apiKey := flag.String("api-key", os.Getenv("GEMINI_API_KEY"), "Gemini API Key (env: GEMINI_API_KEY)") //
	insecure := flag.Bool("insecure", false, "Disable security checks (Use with extreme caution!)")      //
	startupScript := flag.String("startup-script", "agent_startup.ns", "Path to NeuroScript file for agent initialization") //

	syncDir := flag.String("sync-dir", ".", "Directory for sync operations (-sync mode)") //
	syncFilter := flag.String("sync-filter", "", "Glob pattern for sync (-sync mode)")   //
	syncIgnoreGitignore := flag.Bool("sync-ignore-gitignore", false, "Ignore .gitignore during sync (-sync mode)") //

	scriptFile := flag.String("script", "", "Path to a NeuroScript file to execute (script mode)") //
	agentMode := flag.Bool("agent", false, "Run in interactive agent mode (uses -startup-script)") //
	syncMode := flag.Bool("sync", false, "Run in sync-only mode")                                 //
	cleanAPI := flag.Bool("clean-api", false, "Delete all files from the File API (use with caution!)") //
	tuiMode := flag.Bool("tui", false, "Run in interactive TUI mode (experimental)")                   //

	flag.Parse()

	// --- Logger Initialization ---
	// *** Call the new initialization function ***
	logger, err := initializeLogger(*logLevel, *logFile)
	if err != nil {
		// If logger init fails, print to stderr and exit
		fmt.Fprintf(os.Stderr, "Error initializing logger: %v\n", err)
		os.Exit(1)
	}
	// *** Logger initialization successful ***
	logger.Info("Logger initialized", "level", *logLevel, "file", *logFile) // Log initialization success

	// --- Determine Mode ---
	// ... (your mode determination logic remains the same) ...
	modeCount := 0
	if *scriptFile != "" {
		modeCount++
	}
	if *agentMode {
		modeCount++
	}
	if *syncMode {
		modeCount++
	}
	if *cleanAPI {
		modeCount++
	}
	if *tuiMode {
		modeCount++
	}

	runScript := *scriptFile != ""
	runAgent := *agentMode
	runSync := *syncMode
	runCleanAPI := *cleanAPI
	runTui := *tuiMode

	if *cleanAPI { // Highest precedence
		runScript, runAgent, runSync, runTui = false, false, false, false
	} else if *syncMode {
		runScript, runAgent, runCleanAPI, runTui = false, false, false, false
	} else if *scriptFile != "" {
		runAgent, runSync, runCleanAPI, runTui = false, false, false, false
	} else if *tuiMode {
		runAgent, runSync, runCleanAPI, runScript = false, false, false, false
	}
	// If agent flag wasn't explicitly set BUT no other mode was, default to agent mode
	if !runScript && !runAgent && !runSync && !runCleanAPI && !runTui {
		runAgent = true
		logger.Info("Defaulting to interactive agent mode.") // Use logger here
	}
	// Simple check for multiple modes after defaulting
	finalModeCount := 0
	if runScript {
		finalModeCount++
	}
	if runAgent {
		finalModeCount++
	}
	if runSync {
		finalModeCount++
	}
	if runCleanAPI {
		finalModeCount++
	}
	if runTui {
		finalModeCount++
	}

	if finalModeCount > 1 {
		// Use logger before exiting
		logger.Error("Multiple execution modes specified", "script", runScript, "agent", runAgent, "sync", runSync, "cleanAPI", runCleanAPI, "tui", runTui)
		fmt.Fprintln(os.Stderr, "Error: Only one execution mode (-script, -agent, -sync, -clean-api, -tui) can be specified.")
		flag.Usage()
		os.Exit(1)
	}

	// --- App Initialization ---
	// Pass the initialized logger to NewApp (Assuming NewApp accepts logging.Logger)
	// You'll need to modify NewApp's signature if it doesn't already accept the logger.
	// Example modification: func NewApp(logger logging.Logger) *App { ... }
	app := neurogo.NewApp(logger) // *** Pass the logger here ***

	// Configure app.Config struct...
	app.Config.APIKey = *apiKey
	app.Config.Insecure = *insecure
	app.Config.StartupScript = *startupScript
	app.Config.RunAgentMode = runAgent
	app.Config.RunScriptMode = runScript
	app.Config.RunSyncMode = runSync
	app.Config.RunCleanAPIMode = runCleanAPI
	app.Config.RunTuiMode = runTui
	if runScript {
		app.Config.ScriptFile = *scriptFile
	}
	if runSync {
		app.Config.SyncDir = *syncDir
		app.Config.SyncFilter = *syncFilter
		app.Config.SyncIgnoreGitignore = *syncIgnoreGitignore
	}

	// --- Application Execution ---
	if runTui {
		logger.Info("Starting in TUI mode...")
		// Ensure tui.Start accepts the App struct which now contains the logger
		if err := tui.Start(app); err != nil {
			logger.Error("TUI Error", "error", err) // Use structured logging
			fmt.Fprintf(os.Stderr, "TUI Error: %v\n", err)
			os.Exit(1)
		}
		logger.Debug("TUI finished.")
		os.Exit(0)
	}

	// --- Run selected mode via app.Run ---
	ctx := context.Background()
	if err := app.Run(ctx); err != nil {
		// app.Run should use its injected logger internally
		// Keep a simple stderr message for the final exit
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}

	logger.Info("NeuroGo finished successfully.")
}