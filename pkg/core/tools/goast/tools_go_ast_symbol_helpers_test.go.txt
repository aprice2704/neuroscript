// filename: core/tools_go_ast_symbol_map_test.go (or a shared test helper file)
package goast
import "github.com/aprice2704/neuroscript/pkg/core/tools/goast"


import (
	"os"
	"path/filepath"
	"testing"
)

// --- Test Setup Helpers ---

// Ensure writeFileHelper is defined (e.g., in tools_go_ast_package_test.go or a shared _test.go file)
// func writeFileHelper(t *testing.T, path string, content string) { ... } // Already present in the file

// setupBasicFixture creates a simple package structure with unique exported symbols.
func setupBasicFixture(t *testing.T, rootDir string) {
	t.Helper()
	originalDir := filepath.Join(rootDir, "testbuildmap", "original")
	sub1Dir := filepath.Join(originalDir, "sub1")
	sub2Dir := filepath.Join(originalDir, "sub2")

	err := os.MkdirAll(sub1Dir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", sub1Dir, err)
	}
	err = os.MkdirAll(sub2Dir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", sub2Dir, err)
	}

	// Content for sub1
	sub1Content := `package sub1

import "fmt"

var ExportedVarOne = "hello"

func ExportedFuncOne() {
	fmt.Println(ExportedVarOne)
}

type internalType struct{} // Unexported

func internalFunc() {} // Unexported
`
	writeFileHelper(t, filepath.Join(sub1Dir, "file1.go"), sub1Content)

	// Content for sub2
	sub2Content := `package sub2

const ExportedConstTwo = 123

type ExportedTypeTwo struct {
	Field int
}

// Method, should be ignored by symbol map
func (e ExportedTypeTwo) Method() {}

var internalVar = 456 // Unexported
`
	writeFileHelper(t, filepath.Join(sub2Dir, "file2.go"), sub2Content)
	// Add an empty file to ensure it's handled correctly
	writeFileHelper(t, filepath.Join(sub2Dir, "empty.go"), "package sub2")
	// Add a _test.go file to ensure it's ignored
	writeFileHelper(t, filepath.Join(sub2Dir, "file2_test.go"), "package sub2\n\nimport \"testing\"\n\nfunc TestDummy(t *testing.T) {}")

}

// setupAmbiguousFixture creates a package structure where the same symbol is exported from multiple subpackages.
func setupAmbiguousFixture(t *testing.T, rootDir string) {
	t.Helper()
	originalDir := filepath.Join(rootDir, "testbuildmap", "original")
	sub1Dir := filepath.Join(originalDir, "sub1")
	sub2Dir := filepath.Join(originalDir, "sub2") // Changed from sub3 to sub2 to match expected error logic

	err := os.MkdirAll(sub1Dir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", sub1Dir, err)
	}
	err = os.MkdirAll(sub2Dir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", sub2Dir, err)
	}

	// Content for sub1
	sub1Content := `package sub1

var AmbiguousVar = "from sub1"

func AmbiguousFunc() {}
`
	writeFileHelper(t, filepath.Join(sub1Dir, "ambig1.go"), sub1Content)

	// Content for sub2 (re-using sub2)
	sub2Content := `package sub2

type AmbiguousVar struct{} // Same name as var in sub1, different type

const AmbiguousFunc = 1 // Same name as func in sub1, different type
`
	writeFileHelper(t, filepath.Join(sub2Dir, "ambig2.go"), sub2Content)
}

// setupNoExportedFixture creates a package structure with only unexported symbols.
func setupNoExportedFixture(t *testing.T, rootDir string) {
	t.Helper()
	originalDir := filepath.Join(rootDir, "testbuildmap", "original")
	sub1Dir := filepath.Join(originalDir, "sub1")
	sub2Dir := filepath.Join(originalDir, "sub2")

	err := os.MkdirAll(sub1Dir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", sub1Dir, err)
	}
	err = os.MkdirAll(sub2Dir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", sub2Dir, err)
	}

	// Content for sub1
	sub1Content := `package sub1

var localVarOne = "hello"

func localFuncOne() {}
`
	writeFileHelper(t, filepath.Join(sub1Dir, "local1.go"), sub1Content)

	// Content for sub2
	sub2Content := `package sub2

const localConstTwo = 123

type localTypeTwo struct{}
`
	writeFileHelper(t, filepath.Join(sub2Dir, "local2.go"), sub2Content)
}

// setupNoSubPackagesFixture creates a package directory but no subdirectories containing Go code.
func setupNoSubPackagesFixture(t *testing.T, rootDir string) {
	t.Helper()
	originalDir := filepath.Join(rootDir, "testbuildmap", "original")
	// Create the base directory, but no subdirectories with Go files
	err := os.MkdirAll(originalDir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", originalDir, err)
	}
	// Optionally add an empty directory or a directory with non-Go files
	emptySubDir := filepath.Join(originalDir, "empty")
	err = os.Mkdir(emptySubDir, 0755)
	if err != nil {
		t.Fatalf("Failed to create dir %s: %v", emptySubDir, err)
	}
	writeFileHelper(t, filepath.Join(emptySubDir, "readme.txt"), "This is not a go file")
}
