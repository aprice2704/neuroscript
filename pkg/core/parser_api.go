// pkg/core/parser_api.go
package core

import (
	"fmt"
	"io"
	"io/ioutil" // Used to read all bytes from the reader
)

// ParseNeuroScript reads NeuroScript code from an io.Reader, parses it
// using the goyacc-generated parser (yyParse), and returns the resulting
// slice of Procedures or an error.
func ParseNeuroScript(r io.Reader) ([]Procedure, error) {
	inputBytes, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, fmt.Errorf("error reading input: %w", err)
	}
	inputString := string(inputBytes)

	// Create the lexer instance (defined in lexer.go or neuroscript.l's Go code)
	lexer := NewLexer(inputString)

	// Call the parser entry point generated by goyacc.
	// yyParse returns 0 on success, non-zero on error.
	// yyError (defined in neuroscript.y) prints errors during parsing.
	// The actual result (parsedResult) is stored in a global variable by parser actions.
	resultCode := yyParse(lexer) // yyParse is generated in neuroscript.y.go

	if resultCode != 0 {
		// An error occurred during parsing, yyError should have printed details.
		return nil, fmt.Errorf("parsing failed (syntax error detected)")
	}

	// Return the global parsedResult variable populated by the parser actions in neuroscript.y
	// Ensure parsedResult is accessible (defined in neuroscript.y's Go section)
	return parsedResult, nil
}
