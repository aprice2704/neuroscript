// Code generated by goyacc -v y.output -o neuroscript.y.go -p yy neuroscript.y. DO NOT EDIT.

//line neuroscript.y:4
package core // Must match package in lexer and ast
import __yyfmt__ "fmt"

//line neuroscript.y:4

import (
	"fmt"
	"strings"
)

// Helper function used in grammar actions
func newStep(typ string, target string, cond string, value interface{}, args []string) Step {
	return Step{Type: typ, Target: target, Cond: cond, Value: value, Args: args}
}

// Helper function to parse docstring content (Placeholder)
// TODO: Implement robust parsing of PURPOSE, INPUTS, etc.
func parseDocstring(content string) Docstring {
	// Simple placeholder implementation
	return Docstring{
		Purpose: "Parsed: " + content, // Indicate it was processed
		Inputs:  make(map[string]string),
	}
}

//line neuroscript.y:29
type yySymType struct {
	yys        int
	str        string
	step       Step
	steps      []Step
	proc       Procedure
	procs      []Procedure // Type for lists of procedures
	params     []string
	args       []string // For CALL arguments (Consider using exprs instead?)
	expr       string
	exprs      []string // For expression lists (arguments, list literals)
	mapEntries []string // For map entries string representations
}

const IDENTIFIER = 57346
const STRING_LIT = 57347
const DOC_COMMENT_CONTENT = 57348
const NUMBER_LIT = 57349
const KW_LAST_CALL_RESULT = 57350
const KW_DEFINE = 57351
const KW_PROCEDURE = 57352
const KW_COMMENT = 57353
const KW_END = 57354
const KW_SET = 57355
const KW_CALL = 57356
const KW_RETURN = 57357
const KW_IF = 57358
const KW_THEN = 57359
const KW_ELSE = 57360
const KW_WHILE = 57361
const KW_DO = 57362
const KW_FOR = 57363
const KW_EACH = 57364
const KW_IN = 57365
const KW_TOOL = 57366
const KW_LLM = 57367
const ASSIGN = 57368
const PLUS = 57369
const LPAREN = 57370
const RPAREN = 57371
const COMMA = 57372
const LBRACK = 57373
const RBRACK = 57374
const LBRACE = 57375
const RBRACE = 57376
const COLON = 57377
const DOT = 57378
const PLACEHOLDER_START = 57379
const PLACEHOLDER_END = 57380
const EQ = 57381
const NEQ = 57382
const GT = 57383
const LT = 57384
const GTE = 57385
const LTE = 57386
const NEWLINE = 57387
const INVALID = 57388

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING_LIT",
	"DOC_COMMENT_CONTENT",
	"NUMBER_LIT",
	"KW_LAST_CALL_RESULT",
	"KW_DEFINE",
	"KW_PROCEDURE",
	"KW_COMMENT",
	"KW_END",
	"KW_SET",
	"KW_CALL",
	"KW_RETURN",
	"KW_IF",
	"KW_THEN",
	"KW_ELSE",
	"KW_WHILE",
	"KW_DO",
	"KW_FOR",
	"KW_EACH",
	"KW_IN",
	"KW_TOOL",
	"KW_LLM",
	"ASSIGN",
	"PLUS",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"LBRACK",
	"RBRACK",
	"LBRACE",
	"RBRACE",
	"COLON",
	"DOT",
	"PLACEHOLDER_START",
	"PLACEHOLDER_END",
	"EQ",
	"NEQ",
	"GT",
	"LT",
	"GTE",
	"LTE",
	"NEWLINE",
	"INVALID",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line neuroscript.y:218
/* Go code section */

// yyError function remains the same
func yyError(s string) {
	// Maybe enhance this later (e.g., integrate with lexer line/pos)
	fmt.Printf("Syntax Error: %s\n", s)
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 130

var yyAct = [...]int8{
	65, 51, 23, 81, 76, 73, 6, 6, 123, 111,
	104, 92, 69, 44, 43, 19, 8, 84, 85, 86,
	87, 88, 89, 54, 57, 64, 58, 55, 98, 72,
	103, 102, 99, 101, 100, 18, 73, 50, 97, 113,
	17, 122, 11, 4, 71, 13, 47, 56, 73, 73,
	62, 70, 63, 25, 112, 67, 61, 74, 90, 125,
	83, 121, 120, 78, 66, 68, 48, 49, 41, 22,
	9, 93, 78, 5, 40, 96, 94, 82, 42, 95,
	91, 10, 7, 75, 45, 105, 106, 107, 108, 109,
	110, 34, 35, 36, 37, 20, 16, 38, 12, 39,
	2, 114, 21, 80, 116, 79, 115, 117, 77, 60,
	59, 53, 52, 119, 118, 46, 30, 29, 28, 33,
	32, 31, 27, 26, 24, 15, 124, 14, 3, 1,
}

var yyPact = [...]int16{
	-1000, -1000, -2, -29, -1000, -1000, 60, -3, -1000, 94,
	-1000, -1000, 17, 92, 11, 5, -1000, -30, 91, 58,
	-1000, 78, 68, 56, 78, -1000, -31, -32, -1000, -1000,
	-1000, -1000, -1000, -1000, 80, 42, 19, 19, 19, 33,
	53, -33, -1000, -1000, -1000, 25, 16, -1000, -7, -1000,
	22, -1000, -1000, -1000, -1000, -1000, 19, -1000, -1000, -1000,
	-1000, 79, 19, 72, 43, -22, 38, 76, -34, -1000,
	19, 19, 75, 19, 9, -10, 0, 4, 22, -1,
	1, -1000, -5, -35, 19, 19, 19, 19, 19, 19,
	-36, 31, -1000, 22, 10, -1000, -1000, -1000, -1000, -1000,
	19, -1000, 72, 19, 78, 22, 22, 22, 22, 22,
	22, 78, 19, -1000, 22, -1000, 22, 50, 49, 21,
	-1000, -1000, -37, 78, 47, -1000,
}

var yyPgo = [...]uint8{
	0, 129, 128, 73, 127, 125, 2, 124, 53, 123,
	122, 121, 120, 119, 118, 117, 116, 115, 0, 1,
	112, 111, 25, 110, 109, 3, 4, 108, 105, 103,
	102, 100, 82,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 31, 31, 32, 32, 3,
	4, 4, 5, 5, 30, 6, 6, 7, 7, 8,
	8, 9, 9, 9, 10, 10, 10, 14, 15, 16,
	16, 11, 12, 13, 17, 17, 17, 22, 22, 22,
	22, 22, 22, 22, 18, 18, 19, 19, 19, 19,
	19, 21, 20, 20, 20, 20, 23, 24, 26, 26,
	27, 27, 28, 28, 29, 29, 25,
}

var yyR2 = [...]int8{
	0, 1, 2, 1, 3, 0, 2, 1, 2, 11,
	0, 1, 1, 3, 4, 0, 1, 1, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 4, 5, 1,
	2, 6, 6, 9, 1, 3, 1, 3, 3, 3,
	3, 3, 3, 1, 1, 3, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 3, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 3,
}

var yyChk = [...]int16{
	-1000, -1, -31, -2, 45, -3, 9, -32, 45, 10,
	-3, 45, 4, 28, -4, -5, 4, 29, 30, 45,
	4, -30, 11, -6, -7, -8, -9, -10, -14, -15,
	-16, -11, -12, -13, 13, 14, 15, 16, 19, 21,
	6, 12, -8, 45, 45, 4, -17, 4, 24, 25,
	-18, -19, -20, -21, 4, 8, 28, 5, 7, -23,
	-24, 37, 31, 33, -22, -18, -22, 22, 12, 45,
	26, 28, 36, 27, -18, 4, -26, -27, -18, -28,
	-29, -25, 5, 17, 39, 40, 41, 42, 43, 44,
	20, 4, 45, -18, -26, 4, -19, 29, 38, 32,
	30, 34, 30, 35, 45, -18, -18, -18, -18, -18,
	-18, 45, 23, 29, -18, -25, -18, -6, -6, -18,
	12, 12, 20, 45, -6, 12,
}

var yyDef = [...]int8{
	5, -2, 1, 2, 6, 3, 0, 0, 7, 0,
	4, 8, 0, 10, 0, 11, 12, 0, 0, 0,
	13, 15, 0, 0, 16, 17, 0, 0, 21, 22,
	23, 24, 25, 26, 0, 0, 29, 0, 0, 0,
	0, 0, 18, 19, 20, 0, 0, 34, 0, 36,
	30, 44, 46, 47, 48, 49, 0, 52, 53, 54,
	55, 0, 58, 62, 0, 43, 0, 0, 0, 9,
	0, 58, 0, 0, 0, 0, 0, 59, 60, 0,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 14, 27, 0, 35, 45, 50, 51, 56,
	0, 57, 0, 0, 15, 37, 38, 39, 40, 41,
	42, 15, 0, 28, 61, 65, 66, 0, 0, 0,
	31, 32, 0, 15, 0, 33,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:90
		{ // Case 1: File is empty or only newlines
			if l, ok := yylex.(*lexer); ok {
				l.SetResult([]Procedure{}) // Set empty result
			} else {
				fmt.Println("Error: Could not access lexer object to set result.")
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line neuroscript.y:97
		{ // Case 2: File has procedures. Trailing newlines handled implicitly by EOF/lexer.
			if l, ok := yylex.(*lexer); ok {
				l.SetResult(yyDollar[2].procs) // $2 is non_empty_procedure_list
			} else {
				fmt.Println("Error: Could not access lexer object to set result.")
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:110
		{
			yyVAL.procs = []Procedure{yyDollar[1].proc}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:111
		{
			yyVAL.procs = append(yyDollar[1].procs, yyDollar[3].proc)
		}
	case 9:
		yyDollar = yyS[yypt-11 : yypt+1]
//line neuroscript.y:123
		{
			var proc Procedure
			proc.Name = yyDollar[3].str
			proc.Params = yyDollar[5].params
			proc.Docstring = parseDocstring(yyDollar[8].str) // Using placeholder helper
			proc.Steps = yyDollar[9].steps
			yyVAL.proc = proc
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line neuroscript.y:132
		{
			yyVAL.params = []string{}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:132
		{
			yyVAL.params = yyDollar[1].params
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:133
		{
			yyVAL.params = []string{yyDollar[1].str}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:133
		{
			yyVAL.params = append(yyDollar[1].params, yyDollar[3].str)
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
//line neuroscript.y:135
		{
			yyVAL.str = yyDollar[2].str
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line neuroscript.y:138
		{
			yyVAL.steps = []Step{}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:139
		{
			yyVAL.steps = yyDollar[1].steps
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:142
		{
			if yyDollar[1].step.Type != "" {
				yyVAL.steps = []Step{yyDollar[1].step}
			} else {
				yyVAL.steps = []Step{}
			}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line neuroscript.y:143
		{
			if yyDollar[2].step.Type != "" {
				yyVAL.steps = append(yyDollar[1].steps, yyDollar[2].step)
			} else {
				yyVAL.steps = yyDollar[1].steps
			}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line neuroscript.y:149
		{
			yyVAL.step = yyDollar[1].step
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line neuroscript.y:150
		{
			yyVAL.step = yyDollar[1].step
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line neuroscript.y:161
		{
			yyVAL.step = newStep("SET", yyDollar[2].str, "", yyDollar[4].str, nil)
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line neuroscript.y:162
		{
			yyVAL.step = newStep("CALL", yyDollar[2].str, "", nil, yyDollar[4].exprs)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:163
		{
			yyVAL.step = newStep("RETURN", "", "", "", nil)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line neuroscript.y:163
		{
			yyVAL.step = newStep("RETURN", "", "", yyDollar[2].str, nil)
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line neuroscript.y:167
		{
			yyVAL.step = newStep("IF", "", yyDollar[2].str, yyDollar[5].steps, nil)
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line neuroscript.y:169
		{
			yyVAL.step = newStep("WHILE", "", yyDollar[2].str, yyDollar[5].steps, nil)
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line neuroscript.y:170
		{
			yyVAL.step = newStep("FOR", yyDollar[3].str, yyDollar[5].str, yyDollar[8].steps, nil)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:173
		{
			yyVAL.str = "TOOL." + yyDollar[3].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:173
		{
			yyVAL.str = "LLM"
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:177
		{
			yyVAL.str = yyDollar[1].str + "==" + yyDollar[3].str
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:178
		{
			yyVAL.str = yyDollar[1].str + "!=" + yyDollar[3].str
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:179
		{
			yyVAL.str = yyDollar[1].str + ">" + yyDollar[3].str
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:180
		{
			yyVAL.str = yyDollar[1].str + "<" + yyDollar[3].str
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:181
		{
			yyVAL.str = yyDollar[1].str + ">=" + yyDollar[3].str
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:182
		{
			yyVAL.str = yyDollar[1].str + "<=" + yyDollar[3].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:183
		{
			yyVAL.str = yyDollar[1].str
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:186
		{
			yyVAL.str = yyDollar[1].str
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:186
		{
			yyVAL.str = yyDollar[1].str + " + " + yyDollar[3].str
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:192
		{
			yyVAL.str = "__last_call_result"
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:193
		{
			yyVAL.str = "(" + yyDollar[2].str + ")"
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:196
		{
			yyVAL.str = "{{" + yyDollar[2].str + "}}"
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:205
		{
			yyVAL.str = "[" + strings.Join(yyDollar[2].exprs, ", ") + "]"
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:206
		{
			yyVAL.str = "{" + strings.Join(yyDollar[2].mapEntries, ", ") + "}"
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line neuroscript.y:208
		{
			yyVAL.exprs = []string{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:208
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:210
		{
			yyVAL.exprs = []string{yyDollar[1].str}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:210
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].str)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line neuroscript.y:212
		{
			yyVAL.mapEntries = []string{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:212
		{
			yyVAL.mapEntries = yyDollar[1].mapEntries
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line neuroscript.y:214
		{
			yyVAL.mapEntries = []string{yyDollar[1].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:214
		{
			yyVAL.mapEntries = append(yyDollar[1].mapEntries, yyDollar[3].str)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line neuroscript.y:216
		{
			yyVAL.str = yyDollar[1].str + ":" + yyDollar[3].str
		}
	}
	goto yystack /* stack new state and value */
}
