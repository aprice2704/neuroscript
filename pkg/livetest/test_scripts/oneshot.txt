// NeuroScript Version: 0.7.0
// File version: 8
// Purpose: Added the 'system_prompt_capsule' to the agent registration to ensure the AI formats its responses correctly.
// filename: livetest/test_scripts/oneshot.txt
// nlines: 52
// risk_rating: LOW

# Registers the account and agent model.
func setup() means
    set env_var_name = "GEMINI_API_KEY"
    set api_key = tool.os.Getenv(env_var_name)
    if api_key == nil or api_key == ""
        fail "Live test requires the " + env_var_name + " environment variable to be set."
    endif

    # Register the account that holds the API key.
    must tool.account.Register("live_test_acct", {\
        "kind": "llm",\
        "provider": "google",\
        "api_key": api_key\
    })

    # Register the agent model that uses the account.
    must tool.agentmodel.Register("live_agent", {\
        "provider": "google",\
        "model": "gemini-1.5-flash-latest",\
        "account_name": "live_test_acct",\
        "tool_loop_permitted": false,\
        "temperature": 0.1,\
        "system_prompt_capsule": "capsule/bootstrap_oneshot"\
    })
    emit "--- VERIFICATION COMPLETE ---"
endfunc

# Verifies that the agent is registered.
func verify(returns bool) means
    emit "--- PROCEEDING TO ASK ---"
    # The 'Exists' tool was removed. We now verify existence by calling 'Get'.
    # If the model doesn't exist, this tool call will fail, halting the script
    # and correctly failing the test.
    set model_info = tool.agentmodel.Get("live_agent")
    return model_info != nil
endfunc

# Runs the main test logic.
func main(returns result) means
    set question = "What were the names of the three astronauts who flew on the Apollo 13 mission?"
    emit "--- MAIN: Assembling prompt for question: " + question

    # The V3 'ask' statement takes a simple string prompt and handles
    # the envelope creation automatically.
    # We no longer need to manually
    # compose the envelope with a tool.
    emit "--- MAIN: Sending prompt to 'ask'."
    ask "live_agent", question into result

    emit "--- MAIN: Raw result from 'ask':"
    emit result

    return result
endfunc