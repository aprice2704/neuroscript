package main

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
)

// processFile parses a single Go file and adds its info to the index.
// It modifies the passed index directly.
func processFile(fset *token.FileSet, filePath string, index *Index) {
	log.Printf("  Processing file: %s", filePath)
	// Parse the file - Mode includes comments for later extraction if needed
	node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		log.Printf("    Error parsing file %q: %v", filePath, err)
		return
	}

	// --- Determine Paths ---
	pkgPathRel, err := getRelativePackagePath(filePath) // Uses global repoRootPath
	if err != nil {
		log.Printf("    Warn: Could not determine relative package path for %q: %v", filePath, err)
		if node.Name != nil {
			pkgPathRel = node.Name.Name // Fallback to package name declared in file
		} else {
			log.Printf("    Error: Cannot determine package for %q. Skipping file.", filePath)
			return
		}
	}

	filePathRel, err := filepath.Rel(repoRootPath, filePath) // Uses global repoRootPath
	if err != nil {
		log.Printf("    Warn: Could not get relative path for %q: %v. Using absolute.", filePath, err)
		filePathRel = filePath // Fallback
	}
	filePathRel = filepath.ToSlash(filePathRel)

	// --- Ensure Map Entries Exist ---
	if _, ok := index.Packages[pkgPathRel]; !ok {
		index.Packages[pkgPathRel] = PackageInfo{Files: make(map[string]FileInfo)}
	}
	if _, ok := index.Packages[pkgPathRel].Files[filePathRel]; !ok {
		index.Packages[pkgPathRel].Files[filePathRel] = FileInfo{
			Functions: []FunctionInfo{},
			Methods:   []MethodInfo{},
			Types:     []TypeInfo{},
		}
	}
	// Get a reference to the actual FileInfo struct in the map
	// Create temporary slices to collect info for this file
	var functions []FunctionInfo
	var methods []MethodInfo
	var types []TypeInfo

	// --- Extract Imports for Call Resolution ---
	imports := make(map[string]string) // Map alias -> full path
	for _, imp := range node.Imports {
		// Need to handle paths wrapped in quotes
		fullPath, err := strings.Trim(imp.Path.Value, `"`), error(nil) // Basic trim
		// A more robust way might involve strconv.Unquote, but this is simpler for now
		// fullPath, err := strconv.Unquote(imp.Path.Value)
		if err != nil {
			log.Printf("    Warn: Could not unquote import path %s: %v", imp.Path.Value, err)
			continue
		}

		alias := ""
		if imp.Name != nil {
			alias = imp.Name.Name
		} else {
			// Use last part of path as implicit alias
			parts := strings.Split(fullPath, "/")
			alias = parts[len(parts)-1]
		}
		// Don't add dot imports or blank imports to the alias map used for resolution
		if alias != "." && alias != "_" {
			imports[alias] = fullPath
		}
	}

	// --- Traverse AST ---
	ast.Inspect(node, func(n ast.Node) bool {
		switch decl := n.(type) {
		case *ast.FuncDecl:
			funcName := decl.Name.Name
			// Skip functions with no name (shouldn't happen at top level?)
			if funcName == "" {
				return false
			}
			signature := formatSignature(fset, decl.Type) // Format the signature string
			calls := []CallInfo{}

			// Inspect function body for calls
			if decl.Body != nil {
				ast.Inspect(decl.Body, func(callNode ast.Node) bool {
					if callExpr, ok := callNode.(*ast.CallExpr); ok {
						// Pass fset for position info
						callTarget := resolveCallTarget(fset, callExpr, pkgPathRel, imports)
						if callTarget != "" { // Only add if resolved reasonably
							calls = append(calls, CallInfo{
								To:   callTarget,
								Line: fset.Position(callExpr.Pos()).Line,
							})
						}
					}
					return true // Continue inspecting within the body
				})
			}

			if decl.Recv != nil && len(decl.Recv.List) > 0 {
				// Method
				receiverStr := formatReceiver(fset, decl.Recv.List[0].Type) // Format receiver type string
				shortName := getShortName(pkgPathRel, receiverStr, funcName)
				methodInfo := MethodInfo{
					Receiver:  receiverStr,
					Name:      funcName,
					ShortName: shortName,
					Signature: signature, // Signature helper should format the func part only
					Calls:     calls,
				}
				methods = append(methods, methodInfo) // Append to temporary slice

			} else {
				// Function
				shortName := getShortName(pkgPathRel, "", funcName)
				funcInfo := FunctionInfo{
					Name:      funcName,
					ShortName: shortName,
					Signature: signature,
					Calls:     calls,
				}
				functions = append(functions, funcInfo) // Append to temporary slice
			}
			return false // Don't inspect further inside function declaration signatures

		case *ast.GenDecl:
			if decl.Tok == token.TYPE {
				for _, spec := range decl.Specs {
					if ts, ok := spec.(*ast.TypeSpec); ok && ts.Name != nil {
						typeName := ts.Name.Name
						typeKind := determineKind(ts.Type) // Determine kind (struct, interface, etc.)
						typeInfo := TypeInfo{
							Name: typeName,
							Kind: typeKind,
						}
						types = append(types, typeInfo) // Append to temporary slice
					}
				}
			}
			// TODO: Optionally handle token.VAR, token.CONST here
			return true // Continue to inspect specs within GenDecl
		}
		return true // Continue traversal
	})

	// Update the index map entry with the collected info
	// This works because maps hold pointers to structs implicitly in this context? No, need reassignment.
	tempFileInfo := index.Packages[pkgPathRel].Files[filePathRel]
	tempFileInfo.Functions = functions
	tempFileInfo.Methods = methods
	tempFileInfo.Types = types
	index.Packages[pkgPathRel].Files[filePathRel] = tempFileInfo // Re-assign updated struct
}

// --- Helper Functions ---

// findRepoPaths tries to find the repo root (containing go.mod) and the module path.
// It searches upwards from the provided startDir.
func findRepoPaths(startDir string) (rootPath string, modulePath string, err error) {
	// Ensure startDir is absolute and clean
	dir, err := filepath.Abs(startDir)
	if err != nil {
		return "", "", fmt.Errorf("failed to get absolute path for starting directory %q: %w", startDir, err)
	}
	dir = filepath.Clean(dir)

	// Check if startDir itself is a file, if so, start from its directory
	info, err := os.Stat(dir)
	if err == nil && !info.IsDir() {
		dir = filepath.Dir(dir)
	} else if err != nil && !os.IsNotExist(err) {
		// Handle potential stat errors on the startDir itself
		return "", "", fmt.Errorf("failed to stat starting path %q: %w", startDir, err)
	}
	// If startDir didn't exist, the loop below will handle it gracefully

	log.Printf("Starting go.mod search upwards from: %s", dir)

	for {
		goModPath := filepath.Join(dir, "go.mod")
		log.Printf("  Checking: %s", goModPath)
		_, statErr := os.Stat(goModPath)

		if statErr == nil {
			// Found go.mod
			rootPath = dir
			modPath, parseErr := parseModulePath(goModPath) // Try to parse it
			if parseErr != nil {
				// *** Improved Error Message ***
				// Return the found rootPath, but a specific error about parsing THAT file
				return rootPath, "", fmt.Errorf("found '%s' but failed to parse module path: %w", goModPath, parseErr)
			}
			modulePath = modPath
			log.Printf("  Found go.mod at: %s (Module: %s)", rootPath, modulePath)
			return rootPath, modulePath, nil // Success
		}

		if !errors.Is(statErr, os.ErrNotExist) {
			// Error other than file not existing encountered during search
			return "", "", fmt.Errorf("error checking for go.mod at %s: %w", goModPath, statErr)
		}

		// Check if we've reached the root
		parentDir := filepath.Dir(dir)
		if parentDir == dir {
			// Reached filesystem root without finding go.mod
			return "", "", fmt.Errorf("go.mod not found in %s or any parent directory", startDir)
		}
		// Go up one level
		dir = parentDir
	}
}

// parseModulePath reads a go.mod file and extracts the module path.
// Slightly more robust parsing.
func parseModulePath(goModPath string) (string, error) {
	file, err := os.Open(goModPath)
	if err != nil {
		return "", fmt.Errorf("failed to open %s: %w", goModPath, err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	lineNumber := 0
	for scanner.Scan() {
		lineNumber++
		line := scanner.Text()
		// Remove comments first
		if idx := strings.Index(line, "//"); idx != -1 {
			line = line[:idx]
		}
		// Trim leading/trailing whitespace AFTER removing comments
		line = strings.TrimSpace(line)

		// Check for module directive
		if strings.HasPrefix(line, "module") {
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				// The module path is the second part, potentially handling paths with spaces if quoted (rare)
				// For simplicity, assume module path doesn't contain spaces unless quoted.
				// This simple split works for standard module paths like 'module github.com/org/repo'.
				modulePath := parts[1]
				// Trim potential quotes just in case, although unlikely for module paths
				modulePath = strings.Trim(modulePath, `"`)
				log.Printf("    Parsed module path '%s' from line %d of %s", modulePath, lineNumber, goModPath)
				return modulePath, nil // Found module path
			} else {
				// Found 'module' keyword but line format is wrong
				return "", fmt.Errorf("malformed module line (line %d) in %s: %q", lineNumber, goModPath, scanner.Text())
			}
		}
	}

	if err := scanner.Err(); err != nil {
		return "", fmt.Errorf("error reading %s: %w", goModPath, err)
	}

	// Scanned whole file, no module line found
	return "", fmt.Errorf("module directive not found in %s", goModPath)
}

// getRelativePackagePath determines the package path relative to the repo root.
func getRelativePackagePath(filePath string) (string, error) {
	absPath, err := filepath.Abs(filePath)
	if err != nil {
		return "", err
	}
	dir := filepath.Dir(absPath)

	if repoRootPath == "" {
		return "", fmt.Errorf("repoRootPath not set globally") // Ensure repoRootPath is set before calling
	}

	relDir, err := filepath.Rel(repoRootPath, dir)
	if err != nil {
		// Handle cases where file might be outside repoRootPath?
		return "", fmt.Errorf("could not get relative path for dir %s from root %s: %w", dir, repoRootPath, err)
	}

	if relDir == "." {
		// Package in the root directory of the module
		// Its path relative to the module is just its name? Or empty?
		// Let's return "." for consistency with filepath.Rel
		// The getShortName function needs to handle "." correctly.
		return ".", nil
	}

	return filepath.ToSlash(relDir), nil
}

// formatNode uses go/printer to format an AST node into a string.
func formatNode(fset *token.FileSet, node ast.Node) string {
	var buf bytes.Buffer
	// Use Config to ensure compact formatting where possible
	cfg := printer.Config{Mode: printer.RawFormat, Tabwidth: 1}
	err := cfg.Fprint(&buf, fset, node)
	// err := printer.Fprint(&buf, fset, node) // Simpler alternative
	if err != nil {
		log.Printf("Error formatting node: %v", err)
		// Attempt simpler formatting on error
		return fmt.Sprintf("%#v", node) // Fallback to Go syntax representation
	}
	return buf.String()
}

// formatSignature generates a string representation of a function signature (params + results).
func formatSignature(fset *token.FileSet, funcType *ast.FuncType) string {
	paramsStr := formatNode(fset, funcType.Params)
	resultsStr := ""
	if funcType.Results != nil {
		resultsStr = formatNode(fset, funcType.Results)
		// Avoid adding space for "()" which formatNode might produce for empty results
		if resultsStr != "()" {
			resultsStr = " " + resultsStr
		} else {
			resultsStr = "" // Omit empty parentheses
		}
	}
	// Add "func" keyword
	return fmt.Sprintf("func%s%s", paramsStr, resultsStr)
}

// formatReceiver formats the receiver part of a method declaration.
func formatReceiver(fset *token.FileSet, fieldType ast.Expr) string {
	return formatNode(fset, fieldType)
}

// getShortName creates the relative path identifier for a function/method.
// pkgPathRel should be relative to repo root (e.g., "pkg/core" or ".")
func getShortName(pkgPathRel, receiverName, funcName string) string {
	// Clean receiver name (remove leading *) for the short name representation
	cleanReceiver := strings.TrimPrefix(receiverName, "*")

	var parts []string
	// Only include package path if it's not the root package (".")
	if pkgPathRel != "." && pkgPathRel != "" {
		parts = append(parts, pkgPathRel)
	}
	if cleanReceiver != "" {
		parts = append(parts, cleanReceiver)
	}
	parts = append(parts, funcName)

	return strings.Join(parts, ".")
}

// resolveCallTarget attempts to determine the shortName of the called function/method.
// Uses the repoModulePath global to strip prefixes for local calls.
func resolveCallTarget(fset *token.FileSet, call *ast.CallExpr, currentPkgRel string, imports map[string]string) string {
	switch fun := call.Fun.(type) {
	case *ast.Ident:
		// Simple identifier - function in the same package
		return getShortName(currentPkgRel, "", fun.Name)

	case *ast.SelectorExpr:
		// Selector: pkg.Func or obj.Method
		if pkgIdent, ok := fun.X.(*ast.Ident); ok {
			// Potentially pkg.Func
			pkgAlias := pkgIdent.Name // This is the alias used in the source (e.g., "fmt")
			funcName := fun.Sel.Name
			if fullPkgPath, found := imports[pkgAlias]; found {
				// Check if it's an external package or within our repo
				if repoModulePath != "" && strings.HasPrefix(fullPkgPath, repoModulePath) {
					// Local package - strip repo path
					relPkgPath := strings.TrimPrefix(fullPkgPath, repoModulePath)
					relPkgPath = strings.TrimPrefix(relPkgPath, "/")
					// Handle root package case (where relPkgPath might be empty)
					if relPkgPath == "" {
						return getShortName(".", "", funcName) // Call to root package func
					}
					return getShortName(relPkgPath, "", funcName)
				} else {
					// External package - keep full path
					return fmt.Sprintf("%s.%s", fullPkgPath, funcName)
				}
			} else {
				// *** Corrected: Use pkgIdent.Name, not pkgAlias ***
				// Assume it's potentially obj.Method where obj is a type in current package
				// or an unresolvable variable. Mark as uncertain.
				return getShortName(currentPkgRel, pkgIdent.Name, fun.Sel.Name) + "(?)" // Uncertain type call
			}
		} else {
			// Could be obj.Method() where obj is complex (e.g. a function call result a.B().C())
			// or nested selectors a.b.C()
			// Fallback - try to format the expression simply. Might not be accurate.
			targetStr := formatNode(fset, fun)
			return targetStr + "(?)" // Mark complex calls
		}
	default:
		// Other complex cases (function literals, type assertions resulting in funcs, etc.)
		targetStr := formatNode(fset, fun)
		return targetStr + "(?)" // Mark complex calls
	}
}

// determineKind attempts to classify the type declaration.
func determineKind(typeSpec ast.Expr) string {
	switch typeSpec.(type) {
	case *ast.StructType:
		return "struct"
	case *ast.InterfaceType:
		return "interface"
	case *ast.Ident:
		return "alias" // Could be alias or basic type like int, string
	case *ast.ArrayType:
		return "array"
	case *ast.MapType:
		return "map"
	case *ast.ChanType:
		return "chan"
	case *ast.FuncType:
		return "func"
	case *ast.SelectorExpr:
		return "external_type" // e.g. pkg.Type
	case *ast.StarExpr:
		return "pointer" // Pointer to another type
	default:
		// Use reflection or more detailed type string analysis if needed
		return fmt.Sprintf("%T", typeSpec) // Fallback to Go type name
	}
}

// Removed CommaSeparatedFlag from helpers.go
