[
  {
    "spec": {
      "name": "init_identity",
      "groupname": "fdm.admin",
      "fullname": "",
      "description": "Initializes a new core identity (FDM or SAI). Privileged.",
      "args": [
        {
          "name": "name",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "storage_uri",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "set_as_core",
          "type": "bool",
          "description": "",
          "required": true
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "register_agent",
      "groupname": "fdm.admin",
      "fullname": "",
      "description": "Creates a signed agent node in the FDM. Privileged.",
      "args": [
        {
          "name": "identity_uri",
          "type": "string",
          "description": "The storage URI of the agent's identity document.",
          "required": true
        },
        {
          "name": "script_source",
          "type": "string",
          "description": "The NeuroScript source code for the agent.",
          "required": true
        },
        {
          "name": "charter_capsule_id",
          "type": "string",
          "description": "The NodeID of the agent's charter capsule.",
          "required": false
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "is_identity_set",
      "groupname": "fdm.admin",
      "fullname": "",
      "description": "Returns true if the FDM core identity has already been set.",
      "returnType": "bool"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "grant_caps",
      "groupname": "fdm.admin",
      "fullname": "",
      "description": "Grants one or more capabilities to an agent by creating grant nodes.",
      "args": [
        {
          "name": "agent_did",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "capabilities",
          "type": "slice",
          "description": "",
          "required": true
        }
      ],
      "returnType": "slice"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "set_agent_descriptor",
      "groupname": "fdm.admin",
      "fullname": "",
      "description": "Creates or updates an agent's runtime descriptor node.",
      "args": [
        {
          "name": "agent_did",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "interpreter",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "default_tools",
          "type": "slice",
          "description": "",
          "required": false
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "CreateRoot",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Creates a new root node for a discussion forum or thread.",
      "args": [
        {
          "name": "title",
          "type": "string",
          "description": "The title of the discussion.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the newly created disc_root node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Post",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Posts a new message to a discussion thread.",
      "args": [
        {
          "name": "rootID",
          "type": "string",
          "description": "The NodeID of the discussion root (disc_root).",
          "required": true
        },
        {
          "name": "parentID",
          "type": "string",
          "description": "The NodeID of the message being replied to. If empty, this is a top-level post.",
          "required": false
        },
        {
          "name": "markdown",
          "type": "string",
          "description": "The markdown content of the message.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the newly created disc_msg node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Vote",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Submits a unipolar (+1/support, 0/abstain) vote for a message.",
      "args": [
        {
          "name": "msgID",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "value",
          "type": "float",
          "description": "The vote value, typically 1.0 for 'yes' or 0.0 for 'no'.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the newly created disc_vote node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Rate",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Submits a bipolar (-1..+1) quality rating for a message.",
      "args": [
        {
          "name": "msgID",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "rating",
          "type": "float",
          "description": "The rating value between -1.0 and 1.0.",
          "required": true
        },
        {
          "name": "reason",
          "type": "string",
          "description": "An optional brief justification for the rating.",
          "required": false
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the newly created disc_feedback node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Summarize",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Generates a summary node for a message using its aggregated vote and rating data.",
      "args": [
        {
          "name": "msgID",
          "type": "string",
          "description": "The NodeID of the message to summarize.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the newly created disc_summary node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "ListThread",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Lists all messages in a discussion thread, sorted by timestamp.",
      "args": [
        {
          "name": "rootID",
          "type": "string",
          "description": "The NodeID of the discussion root to list.",
          "required": true
        }
      ],
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, where each map is a full message node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "GetContextBundle",
      "groupname": "FDM.Forum",
      "fullname": "",
      "description": "Gets the last N messages of a thread as a single formatted string, suitable for an AI prompt.",
      "args": [
        {
          "name": "rootID",
          "type": "string",
          "description": "The NodeID of the discussion root.",
          "required": true
        },
        {
          "name": "count",
          "type": "int",
          "description": "The number of recent messages to get (default 20, max 20).",
          "required": false
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns a single string with messages formatted as '[author]: content'."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "CreateNode",
      "groupname": "FDM",
      "fullname": "",
      "description": "Creates a new node in the FDM.",
      "args": [
        {
          "name": "type",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "fields",
          "type": "map",
          "description": "",
          "required": false
        }
      ],
      "returnType": "map",
      "returnHelp": "Returns a map representing the newly created node, including its ID."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "GetNode",
      "groupname": "FDM",
      "fullname": "",
      "description": "Retrieves a node by its ID from the FDM.",
      "args": [
        {
          "name": "id",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "map",
      "returnHelp": "Returns a map representing the node's data, or nil if not found."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "DeleteNode",
      "groupname": "FDM",
      "fullname": "",
      "description": "Deletes a node by its ID from the FDM.",
      "args": [
        {
          "name": "id",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "bool",
      "returnHelp": "Returns true on success."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Query",
      "groupname": "FDM",
      "fullname": "",
      "description": "Performs a filtered query for nodes in the FDM.",
      "args": [
        {
          "name": "filter",
          "type": "map",
          "description": "A map defining the filter criteria (e.g., {'type': 'agent'}).",
          "required": true
        },
        {
          "name": "limit",
          "type": "int",
          "description": "An optional maximum number of results to return.",
          "required": false
        }
      ],
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, where each map represents a matched node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "RegisterOverlay",
      "groupname": "FDM",
      "fullname": "",
      "description": "Creates and registers a standard, named overlay required by a script.",
      "args": [
        {
          "name": "overlayName",
          "type": "string",
          "description": "The name of the overlay to register (e.g., 'discussion_vote').",
          "required": true
        }
      ],
      "returnType": "bool",
      "returnHelp": "Returns true on success."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "ListMeta",
      "groupname": "FDM.Overlays",
      "fullname": "",
      "description": "Lists metadata for all registered overlays.",
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, where each map contains metadata about an overlay: id, label, kind"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Find",
      "groupname": "FDM.Symbol",
      "fullname": "",
      "description": "Finds all definitions of a given Go symbol.",
      "args": [
        {
          "name": "symbolName",
          "type": "string",
          "description": "The exact name of the symbol to find (e.g., 'NewFDM').",
          "required": true
        }
      ],
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, each detailing a symbol definition with keys: 'file', 'pos', 'kind', 'recv'."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Create",
      "groupname": "FDM.Plan",
      "fullname": "",
      "description": "Creates a new, empty ingest_plan node for a given repository path.",
      "args": [
        {
          "name": "repoPath",
          "type": "string",
          "description": "The local filesystem path to the repository to be ingested.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the newly created ingest_plan node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "AddOverlay",
      "groupname": "FDM.Plan",
      "fullname": "",
      "description": "Adds an overlay to an ingest_plan, creating a new version of the plan.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "overlayID",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the new, updated ingest_plan node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "AddIndex",
      "groupname": "FDM.Plan",
      "fullname": "",
      "description": "Adds an index to an ingest_plan, creating a new version of the plan.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "indexID",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the new, updated ingest_plan node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "AddIgnorePatterns",
      "groupname": "FDM.Plan",
      "fullname": "",
      "description": "Adds a list of glob patterns to an ingest_plan's ignore list.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "The NodeID of the ingest_plan to modify.",
          "required": true
        },
        {
          "name": "patterns",
          "type": "slice_string",
          "description": "A list of glob patterns to add (e.g., ['**/node_modules', '*.log']).",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the new, updated ingest_plan node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "SetRespectGitignore",
      "groupname": "FDM.Plan",
      "fullname": "",
      "description": "Sets whether the ingestion plan should respect .gitignore files.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "The NodeID of the ingest_plan to modify.",
          "required": true
        },
        {
          "name": "respect",
          "type": "bool",
          "description": "Set to true to respect .gitignore, false to ignore it.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the new, updated ingest_plan node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "AddExcludeMIMETypes",
      "groupname": "FDM.Plan",
      "fullname": "",
      "description": "Adds a list of MIME types to the plan's exclusion list.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "The NodeID of the ingest_plan to modify.",
          "required": true
        },
        {
          "name": "mimeTypes",
          "type": "slice_string",
          "description": "A list of MIME type strings to exclude (e.g., ['image/png', 'application/pdf']).",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the new, updated ingest_plan node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Ingest",
      "groupname": "FDM.Repo",
      "fullname": "",
      "description": "Executes a full ingestion process by walking the entire repository based on a specified ingest_plan.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "The NodeID of the ingest_plan to execute.",
          "required": true
        }
      ],
      "returnType": "bool",
      "returnHelp": "Returns true on successful completion of the ingestion."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "IngestChanges",
      "groupname": "FDM.Repo",
      "fullname": "",
      "description": "Executes an incremental ingestion process for a specified list of changed files.",
      "args": [
        {
          "name": "planID",
          "type": "string",
          "description": "The NodeID of the ingest_plan to use for context.",
          "required": true
        },
        {
          "name": "filePaths",
          "type": "slice_string",
          "description": "A list of file paths that have been added or changed.",
          "required": true
        }
      ],
      "returnType": "bool",
      "returnHelp": "Returns true on successful completion of the incremental ingestion."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "ListDir",
      "groupname": "FDM.FS",
      "fullname": "",
      "description": "Lists the contents of a directory in the FDM.",
      "args": [
        {
          "name": "dirPath",
          "type": "string",
          "description": "The path of the directory to list.",
          "required": true
        },
        {
          "name": "recursive",
          "type": "bool",
          "description": "If true, lists contents of all subdirectories recursively.",
          "required": false
        }
      ],
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, each representing a file or directory with its path and type."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Lookup",
      "groupname": "FDM.FS",
      "fullname": "",
      "description": "Looks up a specific path in the filesystem overlay.",
      "args": [
        {
          "name": "path",
          "type": "string",
          "description": "The exact path of the file or directory to look up.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns the NodeID of the fs_file or fs_dir node, or nil if not found."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "History",
      "groupname": "FDM.FS",
      "fullname": "",
      "description": "Retrieves the rename/move history for a given path.",
      "args": [
        {
          "name": "path",
          "type": "string",
          "description": "The current path of the file to trace.",
          "required": true
        }
      ],
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, each representing a rename event in the file's history."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Rename",
      "groupname": "FDM.FS",
      "fullname": "",
      "description": "Records a rename/move event for a file or directory.",
      "args": [
        {
          "name": "srcPath",
          "type": "string",
          "description": "The original path of the file or directory.",
          "required": true
        },
        {
          "name": "dstPath",
          "type": "string",
          "description": "The new path for the file or directory.",
          "required": true
        }
      ],
      "returnType": "map",
      "returnHelp": "Returns a map representing the newly created fs_rename node."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "Send",
      "groupname": "FDM.IPC",
      "fullname": "",
      "description": "Encodes arbitrary data into a high-performance binary envelope and sends it to a connected IPC client like Lotfi.",
      "args": [
        {
          "name": "data",
          "type": "any",
          "description": "The data (map, list, string, etc.) to send.",
          "required": true
        }
      ],
      "returnType": "bool",
      "returnHelp": "Returns true on success, false otherwise."
    },
    "requiresTrust": false,
    "requiredCaps": [
      {
        "Resource": "ipc",
        "Verbs": [
          "write"
        ],
        "Scopes": null
      }
    ],
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "FindSymbol",
      "groupname": "FDM.SIO",
      "fullname": "",
      "description": "Finds all definitions of a given Go symbol from the Symbol Index Overlay.",
      "args": [
        {
          "name": "symbolName",
          "type": "string",
          "description": "The exact name of the symbol to find (e.g., 'NewFDM').",
          "required": true
        }
      ],
      "returnType": "slice_map",
      "returnHelp": "Returns a list of maps, each detailing a symbol definition with keys: 'NodeID', 'FilePath', 'Kind', 'Position', 'Recv'."
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "patch",
      "groupname": "FDM.File",
      "fullname": "",
      "description": "Applies a diff patch to a file, writes it to disk, and triggers a re-ingestion.",
      "args": [
        {
          "name": "path",
          "type": "string",
          "description": "The repository-relative path to the file to patch.",
          "required": true
        },
        {
          "name": "patchText",
          "type": "string",
          "description": "The patch content in standard diff format.",
          "required": true
        }
      ],
      "returnType": "string",
      "returnHelp": "Returns a confirmation message on success."
    },
    "requiresTrust": false,
    "requiredCaps": [
      {
        "Resource": "fs",
        "Verbs": [
          "write"
        ],
        "Scopes": null
      }
    ],
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "GetOrCreateByDID",
      "groupname": "fdm.agent",
      "fullname": "",
      "description": "",
      "args": [
        {
          "name": "did",
          "type": "string",
          "description": "The decentralized identifier of the agent.",
          "required": true
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "AssignModel",
      "groupname": "fdm.agent",
      "fullname": "",
      "description": "",
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "SetRole",
      "groupname": "fdm.agent",
      "fullname": "",
      "description": "",
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "LoadScriptSigned",
      "groupname": "fdm.agent",
      "fullname": "",
      "description": "",
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "send",
      "groupname": "fdm.bus",
      "fullname": "",
      "description": "",
      "args": [
        {
          "name": "event_object",
          "type": "map",
          "description": "A standard event object map, created with ns_event.Compose().",
          "required": true
        }
      ],
      "returnType": "bool"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "unlock",
      "groupname": "fdm.kms",
      "fullname": "",
      "description": "Unseals the Key Management Service. Privileged.",
      "args": [
        {
          "name": "passphrase",
          "type": "string",
          "description": "",
          "required": false
        },
        {
          "name": "raw_key_b64",
          "type": "string",
          "description": "",
          "required": false
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "lock",
      "groupname": "fdm.kms",
      "fullname": "",
      "description": "Seals the Key Management Service. Privileged.",
      "returnType": "map"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "status",
      "groupname": "fdm.kms",
      "fullname": "",
      "description": "Gets the current status of the Key Management Service.",
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "generate",
      "groupname": "fdm.kms",
      "fullname": "",
      "description": "Generates a new named key. Privileged.",
      "args": [
        {
          "name": "label",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "kind",
          "type": "string",
          "description": "One of: Ed25519, X25519, HMAC, AES256",
          "required": true
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "sign",
      "groupname": "fdm.kms",
      "fullname": "",
      "description": "Signs a message with a named key.",
      "args": [
        {
          "name": "label",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "data_b64",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "key_id",
          "type": "string",
          "description": "",
          "required": false
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "get_public",
      "groupname": "fdm.kms",
      "fullname": "",
      "description": "Retrieves the public key for a named asymmetric key.",
      "args": [
        {
          "name": "label",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "key_id",
          "type": "string",
          "description": "",
          "required": false
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "add_mount",
      "groupname": "fdm.persist_admin",
      "fullname": "",
      "description": "Adds a new mount to the storage configuration. Privileged.",
      "args": [
        {
          "name": "mount_definition",
          "type": "map",
          "description": "A map defining the mount, e.g., {'prefix':'store://...','buckets':['b1']}",
          "required": false
        }
      ],
      "returnType": "string"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "add_alias",
      "groupname": "fdm.persist_admin",
      "fullname": "",
      "description": "Adds a new alias to the storage configuration. Privileged.",
      "args": [
        {
          "name": "alias_name",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "target_uri",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "string"
    },
    "requiresTrust": true,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "put",
      "groupname": "fdm.persist",
      "fullname": "",
      "description": "Saves a value (string or bytes) to a storage URI.",
      "args": [
        {
          "name": "uri",
          "type": "string",
          "description": "",
          "required": true
        },
        {
          "name": "value",
          "type": "any",
          "description": "",
          "required": true
        }
      ],
      "returnType": "string"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "get",
      "groupname": "fdm.persist",
      "fullname": "",
      "description": "Retrieves a value from a storage URI as a string.",
      "args": [
        {
          "name": "uri",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "string"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "list",
      "groupname": "fdm.persist",
      "fullname": "",
      "description": "Lists all keys and values under a given URI prefix.",
      "args": [
        {
          "name": "uri_prefix",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "del",
      "groupname": "fdm.persist",
      "fullname": "",
      "description": "Deletes a value at a specific storage URI.",
      "args": [
        {
          "name": "uri",
          "type": "string",
          "description": "",
          "required": true
        }
      ],
      "returnType": "string"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "get_startup_capsule",
      "groupname": "fdm.agent",
      "fullname": "",
      "description": "Retrieves the agent's private startup capsule data from the FDM.",
      "returnType": "any"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  },
  {
    "spec": {
      "name": "get_identity",
      "groupname": "fdm.agent",
      "fullname": "",
      "description": "Retrieves the agent's own core identity attributes.",
      "returnType": "map"
    },
    "requiresTrust": false,
    "signatureChecksum": ""
  }
]