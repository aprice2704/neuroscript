:: lang_version: neuroscript@0.5.0
:: file_version: 0.1.0

func TestAllOperatorsAndFunctions() means
:: description: Executes various arithmetic, logical, bitwise, comparison, and built-in math function operations to test the interpreter's expression evaluation capabilities. Uses EMIT to display results.
:: purpose: Test expression evaluation.
:: algorithm: \
  1. Define initial variables.\
  2. Test Arithmetic (+, -, *, /, %, **).\
  3. Test Unary Minus.\
  4. Test String Concatenation (+).\
  5. Test Comparisons (==, !=, >, <, >=, <=).\
  6. Test Logical Operators (AND, OR, NOT) and truthiness.\
  7. Test Bitwise Operators (&, |, ^).\
  8. Test Built-in Math Functions (LN, LOG, SIN, COS, TAN, ASIN, ACOS, ATAN).\
  9. Test Operator Precedence.\
  10. Test Error conditions (e.g., Div by zero).
:: caveats: Output should be manually inspected to confirm correctness. Relies on EMIT for verification.
:: examples: CALL TestAllOperatorsAndFunctions()

  emit "--- Starting Expression Evaluation Tests ---"

  set intA = 10
  set intB = 3
  set intC = -5
  set int0 = 0
  set floatA = 10.0
  set floatB = 3.0
  set floatC = 0.5
  set float0 = 0.0
  set strA = "Hello"
  set strB = "World"
  set strNumA = "100"
  set strNumB = "2.5"
  set strNonNum = "abc"
  set boolTrue = true
  set boolFalse = false
  set bit5 = 5
  set bit6 = 6
  set mathE = 2.71828
  set mathPiHalf = 1.570796
  set mathOne = 1
  set mathZero = 0
  set mathNegOne = -1

  emit "Initial Vars: intA=10, intB=3, floatA=10.0, floatB=3.0, floatC=0.5, strA='Hello', strNumA='100', boolTrue=true, bit5=5, bit6=6"

  emit "\n--- Arithmetic Tests ---"
  set res_add_ii = intA + intB
  emit "intA + intB (10+3) = " + res_add_ii + " (Expected: 13)"
  set res_add_if = intA + floatB
  emit "intA + floatB (10+3.0) = " + res_add_if + " (Expected: 13.0)"
  set res_add_fi = floatA + intB
  emit "floatA + intB (10.0+3) = " + res_add_fi + " (Expected: 13.0)"
  set res_add_ff = floatA + floatB
  emit "floatA + floatB (10.0+3.0) = " + res_add_ff + " (Expected: 13.0)"
  set res_add_is = intA + eval(strNumA)
  emit "intA + strNumA (10+'100') = " + res_add_is + " (Expected: 110)"
  set res_sub_ii = intA - intB
  emit "intA - intB (10-3) = " + res_sub_ii + " (Expected: 7)"
  set res_sub_if = intA - floatC
  emit "intA - floatC (10-0.5) = " + res_sub_if + " (Expected: 9.5)"

  set res_mul_ii = intA * intB
  emit "intA * intB (10*3) = " + res_mul_ii + " (Expected: 30)"
  set res_mul_if = intB * floatC
  emit "intB * floatC (3*0.5) = " + res_mul_if + " (Expected: 1.5)"

  set res_div_ii_e = intA / intB
  emit "intA / intB (10/3) = " + res_div_ii_e + " (Expected: 3.33...)"
  set res_div_ii_i = 9 / intB
  emit "9 / intB (9/3) = " + res_div_ii_i + " (Expected: 3)"
  set res_div_ff = floatA / floatB
  emit "floatA / floatB (10.0/3.0) = " + res_div_ff + " (Expected: 3.33...)"

  set res_mod_ii = intA % intB
  emit "intA % intB (10%3) = " + res_mod_ii + " (Expected: 1)"

  set res_pow_ii = intB ** intB
  emit "intB ** intB (3**3) = " + res_pow_ii + " (Expected: 27.0)"
  set res_pow_if = intA ** floatC
  emit "intA ** floatC (10**0.5) = " + res_pow_if + " (Expected: ~3.162)"

  emit "\n--- Unary Minus ---"
  set res_uneg_i = -intA
  emit "-intA (-10) = " + res_uneg_i + " (Expected: -10)"
  set res_uneg_f = -floatA
  emit "-floatA (-10.0) = " + res_uneg_f + " (Expected: -10.0)"
  set res_uneg_c = -intC
  emit "-intC (-(-5)) = " + res_uneg_c + " (Expected: 5)"

  emit "\n--- String Concatenation ---"
  set res_cat_ss = strA + " " + strB
  emit "strA + ' ' + strB = '" + res_cat_ss + "' (Expected: 'Hello World')"
  set res_cat_si = strA + intA
  emit "strA + intA ('Hello'+10) = '" + res_cat_si + "' (Expected: 'Hello10')"
  set res_cat_sf = strA + floatA
  emit "strA + floatA ('Hello'+10.0) = '" + res_cat_sf + "' (Expected: 'Hello10' or 'Hello10.0')"
  set res_cat_sbool = strA + boolTrue
  emit "strA + boolTrue ('Hello'+true) = '" + res_cat_sbool + "' (Expected: 'Hellotrue')"

  emit "\n--- Comparisons ---"
  emit "intA == 10 : " + (intA == 10) + " (Expected: true)"
  emit "intA == floatA : " + (intA == floatA) + " (Expected: true)"
  emit "intA == strNumA : " + (intA == eval(strNumA)) + " (Expected: false)"
  emit "10 == '10' : " + (10 == '10') + " (Expected: false)"
  emit "strA == 'Hello' : " + (strA == 'Hello') + " (Expected: true)"
  emit "intA != 3 : " + (intA != 3) + " (Expected: true)"
  emit "intA > intB : " + (intA > intB) + " (Expected: true)"
  emit "intB < floatA : " + (intB < floatA) + " (Expected: true)"
  emit "intA >= 10 : " + (intA >= 10) + " (Expected: true)"
  emit "intB <= floatC : " + (intB <= floatC) + " (Expected: false)"

  emit "\n--- Logical Operators ---"
  set truthy1 = 1
  set truthyStr = "true"
  set falsey0 = 0
  set falseyStr = "False"
  set falseyOther = "hello"
  emit "NOT boolTrue : " + (not boolTrue) + " (Expected: false)"
  emit "NOT falsey0 : " + (not falsey0) + " (Expected: true)"
  emit "NOT falseyOther : " + (not falseyOther) + " (Expected: true)"
  emit "boolTrue AND truthy1 : " + (boolTrue and truthy1) + " (Expected: true)"
  emit "boolTrue AND falsey0 : " + (boolTrue and falsey0) + " (Expected: false)"
  emit "falsey0 AND boolTrue : " + (falsey0 and boolTrue) + " (Expected: false)"
  emit "boolFalse OR boolTrue : " + (boolFalse or boolTrue) + " (Expected: true)"
  emit "boolTrue OR falsey0 : " + (boolTrue or falsey0) + " (Expected: true)"
  emit "falsey0 OR falseyOther : " + (falsey0 or falseyOther) + " (Expected: false)"

  emit "\n--- Bitwise Operators ---"
  emit "bit5 & bit6 (5&6) = " + (bit5 & bit6) + " (Expected: 4)"
  emit "bit5 | bit6 (5|6) = " + (bit5 | bit6) + " (Expected: 7)"
  emit "bit5 ^ bit6 (5^6) = " + (bit5 ^ bit6) + " (Expected: 3)"

  emit "\n--- Math Functions ---"
  emit "LN(mathE) (LN(~2.718)) = " + ln(mathE) + " (Expected: ~1.0)"
  emit "LOG(100) = " + log(100) + " (Expected: 2.0)"
  emit "SIN(mathPiHalf) (SIN(Pi/2)) = " + sin(mathPiHalf) + " (Expected: 1.0)"
  emit "COS(mathZero) (COS(0)) = " + cos(mathZero) + " (Expected: 1.0)"
  emit "TAN(mathZero) (TAN(0)) = " + tan(mathZero) + " (Expected: 0.0)"
  emit "ASIN(mathOne) (ASIN(1)) = " + asin(mathOne) + " (Expected: ~1.57)"
  emit "ACOS(mathZero) (ACOS(0)) = " + acos(mathZero) + " (Expected: ~1.57)"
  emit "ATAN(mathOne) (ATAN(1)) = " + atan(mathOne) + " (Expected: ~0.785)"

  emit "\n--- Precedence ---"
  set prec1 = 2 + 3 * 4
  emit "2 + 3 * 4 = " + prec1 + " (Expected: 14)"
  set prec2 = (2 + 3) * 4
  emit "(2 + 3) * 4 = " + prec2 + " (Expected: 20)"
  set prec3 = 10 / 2 * 5
  emit "10 / 2 * 5 = " + prec3 + " (Expected: 25)"
  set prec4 = 2 ** 3 ** 2
  emit "2 ** 3 ** 2 = " + prec4 + " (Expected: 512.0)"
  set prec5 = -5 + 2
  emit "-5 + 2 = " + prec5 + " (Expected: -3)"
  set prec6 = (10 > 5) and (3 < 4)
  emit "10 > 5 AND 3 < 4 = " + prec6 + " (Expected: true)"

  emit "\n--- Error Conditions (Expect failure on first) ---"
  emit "Testing Division by Zero: 10 / 0"
  emit "Testing Modulo by Zero: 10 % 0"
  emit "Testing Modulo Float: 5.5 % 2"
  emit "Testing Bitwise Float: 5 & 6.0"
  emit "Testing LN(0): LN(0)"
  emit "Testing ASIN(2): ASIN(2)"

  emit "\n--- Tests Complete ---"
  return "Finished expression tests."
endfunc

