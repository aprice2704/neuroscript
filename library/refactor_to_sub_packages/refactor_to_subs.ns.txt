:: lang_version: neuroscript@0.5.0
:: file_version: 1.0.0
:: description: Interactively refactors pkg/core into sub-packages on a new branch.
:: requires: IO.Input, TOOL.MoveFile, TOOL.GoUpdateImportsForMovedPackage (or equivalent AI capability)

func main(needs source_dir, target_base, internal_pkg_dir, module_path) means
:: description: Main procedure for refactoring pkg/core.
:: purpose: Splits the pkg/core package into sub-packages based on file names.
:: param:source_dir: Path to the source directory (pkg/core).
:: param:target_base: Base path for tool packages (pkg/core/tools).
:: param:internal_pkg_dir: Path for non-tool core logic (pkg/core/internal).
:: param:module_path: Go module path (neuroscript).
  set source_dir = "pkg/core"
  set target_base = "pkg/core/tools"
  set internal_pkg_dir = "pkg/core/internal"
  set module_path = "neuroscript"

  set timestamp = tool.ExecuteCommand("date +%Y%m%d%H%M%S")
  on_error means
    call IO.Print("Error getting timestamp: ", last.error)
    fail 1
  endon
  set branch_name = tool.StringJoin(["refactor/core-split-", timestamp["stdout"]], "")
  call IO.Print("Creating new branch: ", branch_name)
  set git_branch_result = tool.GitNewBranch(branch_name)
  on_error means
    call IO.Print("Error creating branch: ", last.error)
    fail 1
  endon
  set git_checkout_result = tool.GitCheckout(branch_name)
  on_error means
    call IO.Print("Error checking out branch: ", last.error)
    fail 1
  endon

  call IO.Print("Analyzing files in ", source_dir, "...")
  set core_files_list = tool.ListDirectory(source_dir)
  on_error means
    call IO.Print("Error listing directory ", source_dir, ": ", last.error)
    fail 1
  endon

  set proposed_moves = {}
  set subpackage_map = {}

  for each file_info in core_files_list["files"]
    if not tool.StrEndsWith(file_info["name"], ".go") or tool.StrContains(file_info["path"], "/")
      continue
    endif
    set old_path = tool.StringJoin([source_dir, "/", file_info["name"]], "")
    set new_path = nil
    set pkg_name = nil
    if tool.StrPrefix(file_info["name"], "tools_fs")
      set pkg_name = "fs"
      set new_path = tool.StringJoin([target_base, "/fs/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_go_ast")
      set pkg_name = "ast"
      set new_path = tool.StringJoin([target_base, "/go/ast/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_git")
      set pkg_name = "git"
      set new_path = tool.StringJoin([target_base, "/git/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_string")
      set pkg_name = "strutil"
      set new_path = tool.StringJoin([target_base, "/strutil/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_shell")
      set pkg_name = "shell"
      set new_path = tool.StringJoin([target_base, "/shell/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_math")
      set pkg_name = "mathutil"
      set new_path = tool.StringJoin([target_base, "/mathutil/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_vector")
      set pkg_name = "vector"
      set new_path = tool.StringJoin([target_base, "/vector/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_metadata")
      set pkg_name = "metadata"
      set new_path = tool.StringJoin([target_base, "/metadata/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_list")
      set pkg_name = "listutil"
      set new_path = tool.StringJoin([target_base, "/listutil/", file_info["name"]], "")
    elseif tool.StrPrefix(file_info["name"], "tools_")
      set pkg_name = "coretools"
      set new_path = tool.StringJoin([target_base, "/coretools/", file_info["name"]], "")
    else
      set pkg_name = "internal"
      set new_path = tool.StringJoin([internal_pkg_dir, "/", file_info["name"]], "")
    endif
    if new_path != nil
      set proposed_moves[old_path] = new_path
      set subpackage_map[new_path] = pkg_name
    else
      call IO.Print("Warning: Could not determine target for file: ", old_path)
    endif
  endfor

  call IO.Print("\nProposed File Moves:")
  set proposal_text = ""
  for each old_path, new_path in proposed_moves
    set proposal_text = tool.StringJoin([proposal_text, old_path, " -> ", new_path, "\n"], "")
  endfor
  call IO.Print(proposal_text)

  set confirm = "y"
  call IO.Print("User confirmation assumed: ", confirm)

  if confirm != "y"
    call IO.Print("Aborting refactor.")
    fail 0
  endif

  call IO.Print("\nExecuting file moves...")
  set created_dirs = {}

  for each old_path, new_path in proposed_moves
    set new_dir = tool.StringReplace(new_path, tool.ExecuteCommand("basename " + new_path)["stdout"], "")
    if created_dirs[new_dir] == nil
      call IO.Print("Creating directory: ", new_dir)
      set mkdir_result = tool.Mkdir(new_dir)
      on_error means
        call IO.Print("ERROR: Failed to create directory ", new_dir, ": ", last.error)
        call IO.Print("Aborting.")
        fail 1
      endon
      set created_dirs[new_dir] = true
    endif
    call IO.Print("Moving: ", old_path, " -> ", new_path)
    set read_result = tool.ReadFile(old_path)
    on_error means
      call IO.Print("ERROR reading ", old_path)
      fail 1
    endon
    set write_result = tool.WriteFile(new_path, read_result["content"])
    on_error means
      call IO.Print("ERROR writing ", new_path)
      fail 1
    endon
    set delete_result = tool.DeleteFile(old_path)
    on_error means
      call IO.Print("ERROR deleting ", old_path)
      fail 1
    endon
    call IO.Print("Placeholder Move Complete for: ", old_path)
  endfor

  call IO.Print("\nUpdating package declarations...")
  for each new_path, pkg_name in subpackage_map
    call IO.Print("Updating package in: ", new_path, " to ", pkg_name)
    set parse_result = tool.GoParseFile(new_path)
    on_error means
      call IO.Print("ERROR: Failed to parse ", new_path, ": ", last.error)
      continue
    endon
    set modify_directives = [{"directive": "Change Package Declaration", "value": pkg_name}]
    set modify_result = tool.GoModifyAST(parse_result["handle"], modify_directives)
    on_error means
      call IO.Print("ERROR: Failed to modify AST for ", new_path, ": ", last.error)
      continue
    endon
    set format_result = tool.GoFormatASTNode(modify_result["handle"])
    on_error means
      call IO.Print("ERROR: Failed to format AST for ", new_path, ": ", last.error)
      continue
    endon
    set write_pkg_result = tool.WriteFile(new_path, format_result["content"])
    on_error means
      call IO.Print("ERROR: Failed to write updated file ", new_path, ": ", last.error)
    endon
  endfor

  call IO.Print("\nUpdating import paths across project...")
  call IO.Print("Placeholder: Skipping complex import path update. Requires TOOL.GoUpdateImportsForMovedPackage or equivalent AI capability.")

  call IO.Print("\nRunning verification steps...")
  set mod_tidy_result = tool.GoModTidy()
  on_error means
    call IO.Print("Warning: go mod tidy failed: ", last["stderr"])
  endon
  set build_result = tool.GoBuild("./...")
  on_error means
    call IO.Print("ERROR: Go build failed after refactoring:")
    call IO.Print(last["stderr"])
    call IO.Print("Changes remain on branch '", branch_name, "' for inspection. Aborting commit.")
    fail 1
  endon
  set test_result = tool.GoTest("./...")
  on_error means
    call IO.Print("ERROR: Go tests failed after refactoring:")
    call IO.Print(last["stderr"])
    call IO.Print("Changes remain on branch '", branch_name, "' for inspection. Aborting commit.")
    fail 1
  endon

  call IO.Print("\nCommitting changes...")
  set add_result = tool.GitAdd(".")
  on_error means
    call IO.Print("ERROR: Git add failed: ", last["stderr"])
    call IO.Print("Commit aborted.")
    fail 1
  endon
  set commit_msg = "Refactor: Split pkg/core into sub-packages via NeuroScript"
  set commit_result = tool.GitCommit(commit_msg)
  on_error means
    call IO.Print("ERROR: Git commit failed: ", last["stderr"])
    call IO.Print("Commit aborted.")
    fail 1
  endon

  call IO.Print("\nSuccessfully refactored pkg/core into sub-packages!")
  call IO.Print("Changes committed to branch: ", branch_name)

endfunc

