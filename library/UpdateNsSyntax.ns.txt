 :: Name: Update NeuroScript Syntax
 :: Purpose: Recursively finds and refactors NeuroScript files (.ns) in a directory to conform to the current grammar using AI, then stages and commits changes via Git.
 :: Version: 0.3.0
 :: Author: Gemini
 :: requires_tool: tool.ListFiles, tool.ReadFile, tool.WriteFile, tool.GitAdd, tool.GitCommit, tool.StrEndsWith, tool.IsList
 :: requires_ai: true
 :: file_version: 30.2.0

 func UpdateNsSyntax(needs directory_path returns status_message) means
   emit "Processing directory: " + directory_path
   set list_result = tool.ListFiles(directory_path)
   must tool.IsList(list_result) # Halt if ListFiles failed

   set local_staged_files_csv = ""

   for each entry_map in list_result
     set name = entry_map["name"]
     set is_dir = entry_map["is_dir"]
     set full_path = directory_path + "/" + name

     # Handle directories (recursive call) or skip non .ns files
     if is_dir == true
       emit "Entering subdirectory: " + full_path
       call UpdateNsSyntax(needs=full_path) # Ignore result, errors handled internally
       continue # Skip to next entry
     endif
     if tool.StrEndsWith(name, ".ns") == false
       continue # Skip non .ns files
     endif

     # Skip self
     if tool.StrEndsWith(full_path, "UpdateNsSyntax.ns") == true # Simple check
       emit "Skipping self: " + full_path
       continue
     endif

     # Process .ns file
     emit "Processing file: " + full_path
     set original_code = tool.ReadFile(full_path)
     if original_code == "" # Assumes empty string on read error or empty file
         emit "[WARN] Failed to read or file empty: " + full_path
         continue # Skip this file
     endif

     # Construct AI prompt (Assuming NEUROSCRIPT_DEVELOP_PROMPT has rules)
     # Use {{{}}} substitution within the triple-backtick string
     set task_prompt = ```Refactor the following NeuroScript code to strictly adhere to the latest syntax rules provided.
 Ensure the final output is ONLY the raw, refactored NeuroScript code, without any markdown fences or explanations.
 Original Code:
 {{{original_code}}}
 Refactored Code:
 ```
     # Concatenate the standard prompt with the task-specific one
     set full_prompt = NEUROSCRIPT_DEVELOP_PROMPT + "\n\n" + task_prompt

     # Call AI
     emit "Asking AI to refactor: " + full_path
     ask full_prompt into refactored_code

     # Validate AI response and check for changes
     if refactored_code == nil or refactored_code == ""
       emit "[ERROR] AI returned empty or nil response for: " + full_path
       continue # Skip this file
     endif
     if refactored_code == original_code
       emit "No changes needed for file: " + full_path
       continue # Skip this file
     endif

     # Write back changes
     emit "Writing updated file: " + full_path
     set write_status = tool.WriteFile(full_path, refactored_code)
     if write_status != "OK"
       emit "[WARN] Failed to write updated file: " + full_path + " - Error: " + write_status
       continue # Skip staging
     endif

     # Stage successful changes
     emit "Staging updated file: " + full_path
     set add_status = tool.GitAdd(full_path)
     if add_status != "OK"
       emit "[WARN] Failed to stage file: " + full_path + " - Error: " + add_status
       continue # Skip adding to commit list
     endif

     # Add to list for commit
     set local_staged_files_csv = local_staged_files_csv + full_path + ","

   endfor # End FOR EACH loop

   # Commit changes for this directory level
   if local_staged_files_csv != ""
     emit "Committing updated files staged in " + directory_path + " ..."
     set commit_message = "AUTO: Update NeuroScript syntax for " + directory_path
     set commit_result = tool.GitCommit(commit_message)
     emit "Commit Result: " + commit_result
   endif

   set status_message = "Syntax update attempt finished for directory: " + directory_path + ". Check log and git status."
   return status_message

 endfunc