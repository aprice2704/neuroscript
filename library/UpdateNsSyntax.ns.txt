:: Name: Update NeuroScript Syntax (WM Version)
:: Purpose: Recursively finds and refactors NeuroScript files (.ns) in a directory to conform to the current grammar using an AI Worker.
:: Version: 0.3.15
:: Author: Gemini (Updated by Gemini)
:: requires_tool: tool.FS.List, tool.FS.Read, tool.FS.Write, tool.HasSuffix, tool.AIWorker.ExecuteStatelessTask, typeof, tool.Substring
:: requires_ai: true
:: file_version: 45.0.0

func UpdateNsSyntax(needs directory_path, worker_definition_name returns status_message) means
  :: description: Recursively updates .ns files in a directory using an AI worker.
  :: param:directory_path: The path to the directory to process.
  :: param:worker_definition_name: The name of the AI Worker definition to use.
  :: return:0: A status message.

  on error means
    emit "[FATAL ERROR] An unhandled error occurred in UpdateNsSyntax for directory: " + directory_path
    set status_message = "Failure during syntax update for " + directory_path + ". Check logs."
    fail status_message
  endon

  emit "Processing directory: " + directory_path + " with AI Worker: " + worker_definition_name
  
  set fs_list_output = tool.FS.List(directory_path)

  if fs_list_output == nil
    emit "[ERROR] tool.FS.List returned nil for directory: " + directory_path
    set status_message = "Error listing directory (tool returned nil): " + directory_path
    fail status_message
  endif

  set list_result = nil 

  if typeof(fs_list_output) == "map"
    set list_error = fs_list_output["error"]
    set list_error_type = typeof(list_error) 
    if list_error_type == "string" and list_error != ""
      emit "[ERROR] Error listing directory " + directory_path + ": " + list_error
      set status_message = "Error listing directory: " + directory_path
      fail status_message
    else
      if list_error != nil and list_error_type != "string"
         emit "[WARN] tool.FS.List returned a map with a non-string 'error' field. Type: " + list_error_type + ". Value: " + list_error
      endif
      emit "[INFO] Directory " + directory_path + " listed, tool.FS.List returned a map, assuming empty or no accessible entries."
      set list_result = [] 
    endif
  else 
    if typeof(fs_list_output) == "list" 
      set list_result = fs_list_output
    else
      emit "[ERROR] tool.FS.List returned unexpected type: " + typeof(fs_list_output) + " for directory: " + directory_path
      set status_message = "Unexpected result from FS.List for directory: " + directory_path
      fail status_message 
    endif
  endif

  if list_result == nil 
    emit "[CRITICAL INTERNAL LOGIC ERROR] list_result is nil after fs_list_output processing for: " + directory_path
    set status_message = "Internal logic error processing FS.List output for directory: " + directory_path
    fail status_message
  endif

  if typeof(list_result) != "list" 
    emit "[ERROR] list_result is not a list after processing fs_list_output. Type: " + typeof(list_result)
    set status_message = "Internal error: list_result not a list."
    fail status_message
  endif

  # set local_staged_files_csv = "" # Git operations skipped
  set double_newline = "\n\n"

  for each entry_map in list_result
    set name = entry_map["name"]
    set is_dir = entry_map["isDir"] 
    set current_file_path = directory_path + "/" + name

    if is_dir == true
      if name == ".git" or name == ".neuroscript_aiwm" or name == "." or name == ".."
          continue
      endif
      emit "Entering subdirectory: " + current_file_path
      call UpdateNsSyntax(current_file_path, worker_definition_name)
      continue
    endif

    set has_ns_suffix = tool.HasSuffix(name, ".ns")
    set has_nstxt_suffix = tool.HasSuffix(name, ".ns.txt")
    if not has_ns_suffix and not has_nstxt_suffix
      continue
    endif

    set is_self_script_ns_txt = tool.HasSuffix(name, "UpdateNsSyntax.ns.txt")
    set is_self_script_wm_ns = tool.HasSuffix(name, "UpdateNsSyntaxWM.ns")
    if is_self_script_ns_txt == true or is_self_script_wm_ns == true
      emit "Skipping self: " + current_file_path
      continue
    endif

    emit "Processing file: " + current_file_path
    
    set read_result = tool.FS.Read(current_file_path)
    set original_code = nil 
    set read_error_message = ""

    if read_result == nil
        set read_error_message = "tool.FS.Read returned nil"
    else
        set read_result_type = typeof(read_result)
        if read_result_type == "map"
            set read_status = read_result["status"]
            set read_content_from_map = read_result["content"] 
            set read_err_from_map = read_result["error"]
            set read_err_from_map_type = typeof(read_err_from_map)

            if read_status == "OK"
                if typeof(read_content_from_map) == "string"
                    set original_code = read_content_from_map
                else
                    set read_error_message = "tool.FS.Read returned map with OK status but content is not a string. Type: " + typeof(read_content_from_map)
                endif
            else
                set read_error_message = "tool.FS.Read returned map with status: " + read_status
                if read_err_from_map_type == "string" and read_err_from_map != ""
                    set read_error_message = read_error_message + ". Error: " + read_err_from_map
                else 
                  if read_err_from_map != nil and read_err_from_map_type != "string"
                     set read_error_message = read_error_message + ". Error field was non-nil but not a string (Type: " + read_err_from_map_type + ")"
                  endif
                endif
            endif
        else 
            if read_result_type == "string"
                set original_code = read_result 
            else
                set read_error_message = "tool.FS.Read returned unexpected type: " + read_result_type
            endif
        endif
    endif

    if read_error_message != ""
        emit "[WARN] Failed to read file " + current_file_path + ". Reason: " + read_error_message
        continue
    endif

    if original_code == nil 
        emit "[WARN] File content is nil after read: " + current_file_path
        continue
    endif
    if typeof(original_code) != "string" 
        emit "[WARN] File content is not a string after read. Type: " + typeof(original_code) + " for file: " + current_file_path
        continue
    endif
    if original_code == ""
      emit "[INFO] File is empty, skipping AI processing: " + current_file_path
      continue
    endif

    set base_instruction = "Refactor the provided NeuroScript code to strictly adhere to the latest NeuroScript syntax rules. Ensure your output is ONLY the raw, refactored NeuroScript code, without any markdown fences, explanations, or conversational filler."
    set temp_prompt_holder = ""
    if NEUROSCRIPT_DEVELOP_PROMPT != nil and NEUROSCRIPT_DEVELOP_PROMPT != "" 
      set temp_prompt_holder = NEUROSCRIPT_DEVELOP_PROMPT + double_newline + base_instruction
    else
      set temp_prompt_holder = base_instruction
    endif
    
    set full_prompt_for_ai = temp_prompt_holder + double_newline + "### Code to Refactor:" + double_newline + "```neuroscript" + double_newline + original_code + double_newline + "```"
    
    set config_overrides_map = nil 

    set ai_result_map = tool.AIWorker.ExecuteStatelessTask(worker_definition_name, full_prompt_for_ai, config_overrides_map) 
    
    set ai_error_value = "" 
    set refactored_code_value = "" 

    if ai_result_map == nil 
      emit "[ERROR] AI Worker (" + worker_definition_name + ") call returned a nil map object for " + current_file_path
      set ai_error_value = "AI tool returned nil map object" 
    else
      if typeof(ai_result_map) != "map"
        emit "[ERROR] AI Worker (" + worker_definition_name + ") call returned non-map type: " + typeof(ai_result_map) + " for " + current_file_path
        set ai_error_value = "AI tool returned non-map type: " + typeof(ai_result_map)
      else
        set temp_code_val = ai_result_map["output"] 
        set temp_code_val_type = typeof(temp_code_val)
        
        if temp_code_val_type == "string"
          set refactored_code_value = temp_code_val
        else
          set temp_err_val = ai_result_map["error"] 
          set temp_err_val_type = typeof(temp_err_val)

          if temp_err_val_type == "string" and temp_err_val != ""
            set ai_error_value = temp_err_val
          else 
            if temp_err_val != nil and temp_err_val_type != "string"
              set ai_error_value = "AI result map had non-string error field (type: " + temp_err_val_type + ") and output was not a string."
            else
              set ai_error_value = "Expected string for 'output' from AI worker, got " + temp_code_val_type
            endif
          endif
          if temp_code_val != nil and temp_code_val_type != "string"
             emit "[WARN] ai_result_map[\"output\"] was not a string but was not nil. Type: " + temp_code_val_type
          endif
        endif 
      endif
    endif 
    
    if ai_error_value != "" 
      emit "[ERROR] AI Worker (" + worker_definition_name + ") task reported an error for " + current_file_path + ": " + ai_error_value
      continue
    endif

    if refactored_code_value == ""
      emit "[WARN] AI Worker (" + worker_definition_name + ") returned empty or non-string code for: " + current_file_path
      continue
    endif

    if refactored_code_value == original_code
      emit "No changes needed for file: " + current_file_path
      continue
    endif

    emit "Writing updated file: " + current_file_path
    set write_result_string = tool.FS.Write(current_file_path, refactored_code_value) 
    
    set write_status_ok = false
    if typeof(write_result_string) == "string" and write_result_string != ""
        set write_status_ok = true
        emit "[INFO] " + write_result_string 
    endif

    if not write_status_ok
      set error_detail_for_write = "tool.FS.Write returned: "
      if write_result_string == nil
        set error_detail_for_write = error_detail_for_write + "nil"
      else
        set error_detail_for_write = error_detail_for_write + "'" + write_result_string + "' (type: " + typeof(write_result_string) + ")"
      endif
      emit "[WARN] Failed to write updated file: " + current_file_path + ". " + error_detail_for_write
      continue
    endif

    # emit "Staging updated file: " + current_file_path # Git operations skipped
    # set add_result_map = tool.Git.Add(current_file_path) # Git operations skipped
    
    # set add_status_ok = false # Git operations skipped
    # if add_result_map != nil and typeof(add_result_map) == "map" # Git operations skipped
    #     set git_add_status = add_result_map["status"] # Git operations skipped
    #     if git_add_status == "OK" or git_add_status == "" or git_add_status == nil # Git operations skipped
    #         set add_status_ok = true # Git operations skipped
    #     endif # Git operations skipped
    # else  # Git operations skipped
    #   if add_result_map == nil # Git operations skipped
    #       set add_status_ok = true  # Git operations skipped
    #   endif # Git operations skipped
    # endif # Git operations skipped
    
    # if not add_status_ok # Git operations skipped
    #   set add_status_val = "unknown" # Git operations skipped
    #   set add_error_val = "unknown" # Git operations skipped
    #   if add_result_map != nil and typeof(add_result_map) == "map" # Git operations skipped
    #       set add_status_val = add_result_map["status"] # Git operations skipped
    #       set add_error_val = add_result_map["error"] # Git operations skipped
    #   endif # Git operations skipped
    #   emit "[WARN] Failed to stage file: " + current_file_path + " - Status: " + add_status_val + " Error: " + add_error_val # Git operations skipped
    #   continue # Git operations skipped
    # endif # Git operations skipped
    
    # if local_staged_files_csv == "" # Git operations skipped
    #   set local_staged_files_csv = current_file_path # Git operations skipped
    # else # Git operations skipped
    #   set local_staged_files_csv = local_staged_files_csv + "," + current_file_path # Git operations skipped
    # endif # Git operations skipped

  endfor 

  # if local_staged_files_csv != "" # Git operations skipped
  #  emit "Committing updated files staged in " + directory_path + ": " + local_staged_files_csv # Git operations skipped
  #  set commit_message = "AUTO: Update .ns syntax via AI worker for files in " + directory_path # Git operations skipped
  #  call tool.Git.Commit(commit_message) # Git operations skipped
  #  emit "Commit attempt for " + directory_path + " finished." # Git operations skipped
  # else # Git operations skipped
  #  emit "No files staged for commit in " + directory_path # Git operations skipped
  # endif # Git operations skipped

  set status_message = "Syntax update attempt finished for directory: " + directory_path + ". Worker: " + worker_definition_name + ". Check log."
  return status_message

endfunc
