# NeuroScript Skill: Arbitrary Precision Addition (NS Implementation)
# Version: 1.0.0

DEFINE PROCEDURE AddArbitraryPrecision(num_str1, num_str2)
COMMENT:
    PURPOSE: Adds two non-negative integers represented as strings, handling arbitrary precision
             using a digit-by-digit addition algorithm implemented in NeuroScript.
    INPUTS:
        - num_str1 (string): The first non-negative integer as a string.
        - num_str2 (string): The second non-negative integer as a string.
    OUTPUT:
        - sum_str (string): The calculated sum as a string, or an error string if inputs are invalid.
    LANG_VERSION: 1.1.0
    ALGORITHM:
        1. Initialize digit lookup map, result string, carry.
        2. Get lengths of both input strings using TOOL.StringLength.
        3. Determine the maximum length.
        4. Loop from 0 up to max_length - 1 (representing digits from right-to-left).
        5. Inside loop:
            a. Calculate indices to access digits from the right end of each string.
            b. Get digit characters using string[index] access. Handle index out-of-bounds (for shorter string) by using "0".
            c. Use the digit map to convert characters to integer values. Return error if not a digit.
            d. Add the two digit values and the current carry.
            e. Calculate the digit for the result (sum % 10).
            f. Calculate the new carry (sum / 10).
            g. Prepend the result digit string to the overall result string.
        6. After loop, if carry is > 0, prepend it to the result string.
        7. Return the final result string.
    CAVEATS: Assumes non-negative integer inputs. Input validation is basic.
             Relies on TOOL.StringLength, map access, string indexing, and built-in arithmetic (+, -, *, /, %).
             String prepending can be inefficient for very long numbers in some interpreters.
    EXAMPLES: CALL AddArbitraryPrecision_NS("123", "45") => "168"
              CALL AddArbitraryPrecision_NS("99", "1") => "100"
ENDCOMMENT

EMIT "Starting NS Arbitrary Precision Addition for " + num_str1 + " + " + num_str2

# 1. Initialize
SET digit_map = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9}
SET result = ""
SET carry = 0

# 2. Get lengths
CALL TOOL.StringLength(num_str1)
SET len1 = LAST
CALL TOOL.StringLength(num_str2)
SET len2 = LAST

# 3. Determine max length
SET max_len = 0
IF len1 > len2 THEN
    SET max_len = len1
ELSE
    SET max_len = len2
ENDBLOCK

EMIT "Len1=" + len1 + ", Len2=" + len2 + ", MaxLen=" + max_len

# 4. Loop through digits (from right to left conceptually)
SET i = 0
WHILE i < max_len DO
    # 5a. Calculate indices from the right end
    SET idx1 = len1 - 1 - i
    SET idx2 = len2 - 1 - i

    # 5b. Get digit characters, default to "0" if index is out of bounds
    SET char1 = "0"
    IF idx1 >= 0 THEN
        SET char1 = num_str1[idx1]
    ENDBLOCK

    SET char2 = "0"
    IF idx2 >= 0 THEN
        SET char2 = num_str2[idx2]
    ENDBLOCK

    # 5c. Convert characters to integers using map lookup
    SET val1 = digit_map[char1]
    SET val2 = digit_map[char2]

    # Basic input validation (check if lookup returned nil - though map access error might be better)
    IF val1 == nil THEN
        RETURN "Error: Invalid character '" + char1 + "' in num_str1."
    ENDBLOCK
     IF val2 == nil THEN
        RETURN "Error: Invalid character '" + char2 + "' in num_str2."
    ENDBLOCK

    # 5d. Add digits and carry
    SET current_sum = val1 + val2 + carry

    # 5e. Calculate digit for result (sum % 10)
    SET digit_sum = current_sum % 10

    # 5f. Calculate new carry (sum / 10)
    SET carry = current_sum / 10 # Assumes integer division

    # 5g. Prepend result digit to the result string
    SET result = digit_sum + result

    # Increment loop counter
    SET i = i + 1
ENDBLOCK # End WHILE loop

# 6. Final Carry
IF carry > 0 THEN
    SET result = carry + result
ENDBLOCK

EMIT "Addition result: " + result

# 7. Return final result
RETURN result

END