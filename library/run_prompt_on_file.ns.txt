:: lang_version: neuroscript@0.5.0
:: file_version: 1.0.0
:: description: Reads an input file, processes its content with a specified AI worker using a prompt from another file, and overwrites the input file with the result.
:: author: Gemini
:: created_date: 2025-05-21

func ProcessFileWithAI(needs inputFilePath, promptFilePath, workerDefinitionName returns status_message) means
  :: description: Reads a file, gets a prompt from another file, sends them to an AI worker, and writes the result back to the original file.
  :: param:inputFilePath: The full path to the file that will be read and then overwritten.
  :: param:promptFilePath: The full path to a file containing the prompt for the AI.
  :: param:workerDefinitionName: The name or ID of the AI Worker definition to use (e.g., "claude-3-opus-chat").
  :: return:status_message: A status message indicating success or failure.
  :: risk_rating: MEDIUM # Overwrites a file, ensure correct parameters.

  emit "Starting AI file processing for: " + inputFilePath
  emit "Using prompt from: " + promptFilePath
  emit "AI Worker Definition: " + workerDefinitionName

  set inputFileContent = tool.FS.ReadFile(inputFilePath)
  must inputFileContent != nil

  set promptText = tool.FS.ReadFile(promptFilePath)
  must promptText != nil

  emit "Input file and prompt loaded. Invoking AI worker..."

  set aiResult = tool.AIWorker.ExecuteStatelessTask(workerDefinitionName, promptText, {"input_content": inputFileContent})

  must aiResult != nil

  set toolError = aiResult["error"]
  if toolError != nil and toolError != ""
    emit "Error from AI Worker: " + toolError
    fail "AI Worker execution failed: " + toolError
  endif

  emit "AI processing completed. Preparing to write output."

  set processedContent = aiResult["output"]
  must processedContent != nil

  emit "Writing processed content back to: " + inputFilePath
  call tool.FS.WriteFile(inputFilePath, processedContent)

  emit "File successfully processed and overwritten: " + inputFilePath
  return "Success: File '" + inputFilePath + "' processed and updated."

  on_error means
    set errMsg = "An unhandled error occurred during processing."
    if system.error_message != nil and system.error_message != ""
      set errMsg = system.error_message
    endif
    emit "Error in ProcessFileWithAI: " + errMsg
    return "Failure: " + errMsg
  endon
endfunc
